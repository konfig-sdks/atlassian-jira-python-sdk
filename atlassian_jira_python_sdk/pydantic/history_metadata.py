# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from atlassian_jira_python_sdk.pydantic.history_metadata_extra_data import HistoryMetadataExtraData
from atlassian_jira_python_sdk.pydantic.history_metadata_participant import HistoryMetadataParticipant

class HistoryMetadata(BaseModel):
    # The description of the history record.
    description: typing.Optional[str] = Field(None, alias='description')

    # The activity described in the history record.
    activity_description: typing.Optional[str] = Field(None, alias='activityDescription')

    # The key of the activity described in the history record.
    activity_description_key: typing.Optional[str] = Field(None, alias='activityDescriptionKey')

    actor: typing.Optional[HistoryMetadataParticipant] = Field(None, alias='actor')

    cause: typing.Optional[HistoryMetadataParticipant] = Field(None, alias='cause')

    # The description key of the history record.
    description_key: typing.Optional[str] = Field(None, alias='descriptionKey')

    # The description of the email address associated the history record.
    email_description: typing.Optional[str] = Field(None, alias='emailDescription')

    # The description key of the email address associated the history record.
    email_description_key: typing.Optional[str] = Field(None, alias='emailDescriptionKey')

    extra_data: typing.Optional[HistoryMetadataExtraData] = Field(None, alias='extraData')

    generator: typing.Optional[HistoryMetadataParticipant] = Field(None, alias='generator')

    # The type of the history record.
    type: typing.Optional[str] = Field(None, alias='type')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
