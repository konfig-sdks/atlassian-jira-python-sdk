# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from atlassian_jira_python_sdk.pydantic.entity_property import EntityProperty
from atlassian_jira_python_sdk.pydantic.user_details import UserDetails
from atlassian_jira_python_sdk.pydantic.visibility import Visibility

class Worklog(BaseModel):
    author: typing.Optional[UserDetails] = Field(None, alias='author')

    # A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog.
    comment: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='comment')

    # The datetime on which the worklog was created.
    created: typing.Optional[datetime] = Field(None, alias='created')

    # The ID of the worklog record.
    id: typing.Optional[str] = Field(None, alias='id')

    # The ID of the issue this worklog is for.
    issue_id: typing.Optional[str] = Field(None, alias='issueId')

    # Details of properties for the worklog. Optional when creating or updating a worklog.
    properties: typing.Optional[typing.List[EntityProperty]] = Field(None, alias='properties')

    # The URL of the worklog item.
    self_: typing.Optional[str] = Field(None, alias='self')

    # The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
    started: typing.Optional[datetime] = Field(None, alias='started')

    # The time spent working on the issue as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.
    time_spent: typing.Optional[str] = Field(None, alias='timeSpent')

    # The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
    time_spent_seconds: typing.Optional[int] = Field(None, alias='timeSpentSeconds')

    update_author: typing.Optional[UserDetails] = Field(None, alias='updateAuthor')

    # The datetime on which the worklog was last updated.
    updated: typing.Optional[datetime] = Field(None, alias='updated')

    visibility: typing.Optional[Visibility] = Field(None, alias='visibility')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
