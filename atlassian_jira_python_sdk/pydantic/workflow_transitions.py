# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from atlassian_jira_python_sdk.pydantic.condition_group_configuration import ConditionGroupConfiguration
from atlassian_jira_python_sdk.pydantic.workflow_rule_configuration import WorkflowRuleConfiguration
from atlassian_jira_python_sdk.pydantic.workflow_status_and_port import WorkflowStatusAndPort
from atlassian_jira_python_sdk.pydantic.workflow_transitions_properties import WorkflowTransitionsProperties
from atlassian_jira_python_sdk.pydantic.workflow_trigger import WorkflowTrigger

class WorkflowTransitions(BaseModel):
    # The description of the transition.
    description: typing.Optional[str] = Field(None, alias='description')

    # The post-functions of the transition.
    actions: typing.Optional[typing.List[WorkflowRuleConfiguration]] = Field(None, alias='actions')

    conditions: typing.Optional[ConditionGroupConfiguration] = Field(None, alias='conditions')

    # The custom event ID of the transition.
    custom_issue_event_id: typing.Optional[typing.Optional[str]] = Field(None, alias='customIssueEventId')

    # The statuses the transition can start from.
    from_: typing.Optional[typing.List[WorkflowStatusAndPort]] = Field(None, alias='from')

    # The ID of the transition.
    id: typing.Optional[str] = Field(None, alias='id')

    # The name of the transition.
    name: typing.Optional[str] = Field(None, alias='name')

    properties: typing.Optional[WorkflowTransitionsProperties] = Field(None, alias='properties')

    to: typing.Optional[WorkflowStatusAndPort] = Field(None, alias='to')

    transition_screen: typing.Optional[WorkflowRuleConfiguration] = Field(None, alias='transitionScreen')

    # The triggers of the transition.
    triggers: typing.Optional[typing.List[WorkflowTrigger]] = Field(None, alias='triggers')

    # The transition type.
    type: typing.Optional[Literal["INITIAL", "GLOBAL", "DIRECTED"]] = Field(None, alias='type')

    # The validators of the transition.
    validators: typing.Optional[typing.List[WorkflowRuleConfiguration]] = Field(None, alias='validators')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
