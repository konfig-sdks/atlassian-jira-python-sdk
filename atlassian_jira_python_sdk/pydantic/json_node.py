# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from atlassian_jira_python_sdk.pydantic.json_node_binary_value import JsonNodeBinaryValue

class JsonNode(BaseModel):
    array: typing.Optional[bool] = Field(None, alias='array')

    big_decimal: typing.Optional[bool] = Field(None, alias='bigDecimal')

    big_integer: typing.Optional[bool] = Field(None, alias='bigInteger')

    big_integer_value: typing.Optional[int] = Field(None, alias='bigIntegerValue')

    binary: typing.Optional[bool] = Field(None, alias='binary')

    binary_value: typing.Optional[JsonNodeBinaryValue] = Field(None, alias='binaryValue')

    boolean: typing.Optional[bool] = Field(None, alias='boolean')

    boolean_value: typing.Optional[bool] = Field(None, alias='booleanValue')

    container_node: typing.Optional[bool] = Field(None, alias='containerNode')

    decimal_value: typing.Optional[typing.Union[int, float]] = Field(None, alias='decimalValue')

    double: typing.Optional[bool] = Field(None, alias='double')

    double_value: typing.Optional[typing.Union[int, float]] = Field(None, alias='doubleValue')

    elements: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='elements')

    field_names: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='fieldNames')

    fields: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='fields')

    floating_point_number: typing.Optional[bool] = Field(None, alias='floatingPointNumber')

    int_: typing.Optional[bool] = Field(None, alias='int')

    int_value: typing.Optional[int] = Field(None, alias='intValue')

    integral_number: typing.Optional[bool] = Field(None, alias='integralNumber')

    long: typing.Optional[bool] = Field(None, alias='long')

    long_value: typing.Optional[int] = Field(None, alias='longValue')

    missing_node: typing.Optional[bool] = Field(None, alias='missingNode')

    null: typing.Optional[bool] = Field(None, alias='null')

    number: typing.Optional[bool] = Field(None, alias='number')

    number_type: typing.Optional[Literal["INT", "LONG", "BIG_INTEGER", "FLOAT", "DOUBLE", "BIG_DECIMAL"]] = Field(None, alias='numberType')

    number_value: typing.Optional[typing.Union[int, float]] = Field(None, alias='numberValue')

    object: typing.Optional[bool] = Field(None, alias='object')

    pojo: typing.Optional[bool] = Field(None, alias='pojo')

    text_value: typing.Optional[str] = Field(None, alias='textValue')

    textual: typing.Optional[bool] = Field(None, alias='textual')

    value_as_boolean: typing.Optional[bool] = Field(None, alias='valueAsBoolean')

    value_as_double: typing.Optional[typing.Union[int, float]] = Field(None, alias='valueAsDouble')

    value_as_int: typing.Optional[int] = Field(None, alias='valueAsInt')

    value_as_long: typing.Optional[int] = Field(None, alias='valueAsLong')

    value_as_text: typing.Optional[str] = Field(None, alias='valueAsText')

    value_node: typing.Optional[bool] = Field(None, alias='valueNode')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
