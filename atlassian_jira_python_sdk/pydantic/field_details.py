# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from atlassian_jira_python_sdk.pydantic.field_details_clause_names import FieldDetailsClauseNames
from atlassian_jira_python_sdk.pydantic.json_type_bean import JsonTypeBean
from atlassian_jira_python_sdk.pydantic.scope import Scope

class FieldDetails(BaseModel):
    clause_names: typing.Optional[FieldDetailsClauseNames] = Field(None, alias='clauseNames')

    # Whether the field is a custom field.
    custom: typing.Optional[bool] = Field(None, alias='custom')

    # The ID of the field.
    id: typing.Optional[str] = Field(None, alias='id')

    # The key of the field.
    key: typing.Optional[str] = Field(None, alias='key')

    # The name of the field.
    name: typing.Optional[str] = Field(None, alias='name')

    # Whether the field can be used as a column on the issue navigator.
    navigable: typing.Optional[bool] = Field(None, alias='navigable')

    # Whether the content of the field can be used to order lists.
    orderable: typing.Optional[bool] = Field(None, alias='orderable')

    # The data schema for the field.
    schema: typing.Optional[JsonTypeBean] = Field(None, alias='schema')

    # The scope of the field.
    scope: typing.Optional[Scope] = Field(None, alias='scope')

    # Whether the content of the field can be searched.
    searchable: typing.Optional[bool] = Field(None, alias='searchable')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
