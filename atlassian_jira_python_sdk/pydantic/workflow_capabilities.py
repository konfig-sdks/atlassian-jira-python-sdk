# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from atlassian_jira_python_sdk.pydantic.available_workflow_connect_rule import AvailableWorkflowConnectRule
from atlassian_jira_python_sdk.pydantic.available_workflow_forge_rule import AvailableWorkflowForgeRule
from atlassian_jira_python_sdk.pydantic.available_workflow_system_rule import AvailableWorkflowSystemRule
from atlassian_jira_python_sdk.pydantic.available_workflow_triggers import AvailableWorkflowTriggers
from atlassian_jira_python_sdk.pydantic.workflow_capabilities_project_types import WorkflowCapabilitiesProjectTypes

class WorkflowCapabilities(BaseModel):
    # The Connect provided ecosystem rules available.
    connect_rules: typing.Optional[typing.List[AvailableWorkflowConnectRule]] = Field(None, alias='connectRules')

    # The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
    editor_scope: typing.Optional[Literal["PROJECT", "GLOBAL"]] = Field(None, alias='editorScope')

    # The Forge provided ecosystem rules available.
    forge_rules: typing.Optional[typing.List[AvailableWorkflowForgeRule]] = Field(None, alias='forgeRules')

    project_types: typing.Optional[WorkflowCapabilitiesProjectTypes] = Field(None, alias='projectTypes')

    # The Atlassian provided system rules available.
    system_rules: typing.Optional[typing.List[AvailableWorkflowSystemRule]] = Field(None, alias='systemRules')

    # The trigger rules available.
    trigger_rules: typing.Optional[typing.List[AvailableWorkflowTriggers]] = Field(None, alias='triggerRules')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
