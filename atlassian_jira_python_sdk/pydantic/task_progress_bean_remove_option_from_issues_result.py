# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from atlassian_jira_python_sdk.pydantic.remove_option_from_issues_result import RemoveOptionFromIssuesResult

class TaskProgressBeanRemoveOptionFromIssuesResult(BaseModel):
    # The execution time of the task, in milliseconds.
    elapsed_runtime: int = Field(alias='elapsedRuntime')

    # The ID of the task.
    id: str = Field(alias='id')

    # A timestamp recording when the task progress was last updated.
    last_update: int = Field(alias='lastUpdate')

    # The progress of the task, as a percentage complete.
    progress: int = Field(alias='progress')

    # The URL of the task.
    self_: str = Field(alias='self')

    # The status of the task.
    status: Literal["ENQUEUED", "RUNNING", "COMPLETE", "FAILED", "CANCEL_REQUESTED", "CANCELLED", "DEAD"] = Field(alias='status')

    # A timestamp recording when the task was submitted.
    submitted: int = Field(alias='submitted')

    # The ID of the user who submitted the task.
    submitted_by: int = Field(alias='submittedBy')

    # The description of the task.
    description: typing.Optional[str] = Field(None, alias='description')

    # A timestamp recording when the task was finished.
    finished: typing.Optional[int] = Field(None, alias='finished')

    # Information about the progress of the task.
    message: typing.Optional[str] = Field(None, alias='message')

    # The result of the task execution.
    result: typing.Optional[RemoveOptionFromIssuesResult] = Field(None, alias='result')

    # A timestamp recording when the task was started.
    started: typing.Optional[int] = Field(None, alias='started')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
