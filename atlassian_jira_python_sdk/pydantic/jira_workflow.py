# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from atlassian_jira_python_sdk.pydantic.document_version import DocumentVersion
from atlassian_jira_python_sdk.pydantic.project_issue_types import ProjectIssueTypes
from atlassian_jira_python_sdk.pydantic.workflow_layout import WorkflowLayout
from atlassian_jira_python_sdk.pydantic.workflow_reference_status import WorkflowReferenceStatus
from atlassian_jira_python_sdk.pydantic.workflow_scope import WorkflowScope
from atlassian_jira_python_sdk.pydantic.workflow_transitions import WorkflowTransitions

class JiraWorkflow(BaseModel):
    # The description of the workflow.
    description: typing.Optional[str] = Field(None, alias='description')

    version: typing.Optional[DocumentVersion] = Field(None, alias='version')

    # The ID of the workflow.
    id: typing.Optional[str] = Field(None, alias='id')

    # Indicates if the workflow can be edited.
    is_editable: typing.Optional[bool] = Field(None, alias='isEditable')

    # The name of the workflow.
    name: typing.Optional[str] = Field(None, alias='name')

    scope: typing.Optional[WorkflowScope] = Field(None, alias='scope')

    start_point_layout: typing.Optional[WorkflowLayout] = Field(None, alias='startPointLayout')

    # The statuses referenced in this workflow.
    statuses: typing.Optional[typing.List[WorkflowReferenceStatus]] = Field(None, alias='statuses')

    # If there is a current [asynchronous task](https://dac-static.atlassian.com) operation for this workflow.
    task_id: typing.Optional[typing.Optional[str]] = Field(None, alias='taskId')

    # The transitions of the workflow.
    transitions: typing.Optional[typing.List[WorkflowTransitions]] = Field(None, alias='transitions')

    # Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the requested workflows.
    usages: typing.Optional[typing.List[ProjectIssueTypes]] = Field(None, alias='usages')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
