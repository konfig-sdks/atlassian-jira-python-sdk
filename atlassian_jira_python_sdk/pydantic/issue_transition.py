# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from atlassian_jira_python_sdk.pydantic.issue_transition_fields import IssueTransitionFields
from atlassian_jira_python_sdk.pydantic.status_details import StatusDetails

class IssueTransition(BaseModel):
    # Expand options that include additional transition details in the response.
    expand: typing.Optional[str] = Field(None, alias='expand')

    fields: typing.Optional[IssueTransitionFields] = Field(None, alias='fields')

    # Whether there is a screen associated with the issue transition.
    has_screen: typing.Optional[bool] = Field(None, alias='hasScreen')

    # The ID of the issue transition. Required when specifying a transition to undertake.
    id: typing.Optional[str] = Field(None, alias='id')

    # Whether the transition is available to be performed.
    is_available: typing.Optional[bool] = Field(None, alias='isAvailable')

    # Whether the issue has to meet criteria before the issue transition is applied.
    is_conditional: typing.Optional[bool] = Field(None, alias='isConditional')

    # Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
    is_global: typing.Optional[bool] = Field(None, alias='isGlobal')

    # Whether this is the initial issue transition for the workflow.
    is_initial: typing.Optional[bool] = Field(None, alias='isInitial')

    looped: typing.Optional[bool] = Field(None, alias='looped')

    # The name of the issue transition.
    name: typing.Optional[str] = Field(None, alias='name')

    to: typing.Optional[StatusDetails] = Field(None, alias='to')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
