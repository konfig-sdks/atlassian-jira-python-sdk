# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class TransitionUpdateDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The transitions of this workflow.
    """


    class MetaOapg:
        required = {
            "name",
            "id",
            "type",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "INITIAL": "INITIAL",
                        "GLOBAL": "GLOBAL",
                        "DIRECTED": "DIRECTED",
                    }
                
                @schemas.classproperty
                def INITIAL(cls):
                    return cls("INITIAL")
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
                
                @schemas.classproperty
                def DIRECTED(cls):
                    return cls("DIRECTED")
            description = schemas.StrSchema
            
            
            class actions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowRuleConfiguration']:
                        return WorkflowRuleConfiguration
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowRuleConfiguration'], typing.List['WorkflowRuleConfiguration']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'actions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowRuleConfiguration':
                    return super().__getitem__(i)
        
            @staticmethod
            def conditions() -> typing.Type['ConditionGroupUpdate']:
                return ConditionGroupUpdate
            customIssueEventId = schemas.StrSchema
            
            
            class _from(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StatusReferenceAndPort']:
                        return StatusReferenceAndPort
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StatusReferenceAndPort'], typing.List['StatusReferenceAndPort']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> '_from':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StatusReferenceAndPort':
                    return super().__getitem__(i)
        
            @staticmethod
            def properties() -> typing.Type['TransitionUpdateDTOProperties']:
                return TransitionUpdateDTOProperties
        
            @staticmethod
            def to() -> typing.Type['StatusReferenceAndPort']:
                return StatusReferenceAndPort
        
            @staticmethod
            def transitionScreen() -> typing.Type['WorkflowRuleConfiguration']:
                return WorkflowRuleConfiguration
            
            
            class triggers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowTrigger']:
                        return WorkflowTrigger
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowTrigger'], typing.List['WorkflowTrigger']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'triggers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowTrigger':
                    return super().__getitem__(i)
            
            
            class validators(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowRuleConfiguration']:
                        return WorkflowRuleConfiguration
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowRuleConfiguration'], typing.List['WorkflowRuleConfiguration']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'validators':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowRuleConfiguration':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "name": name,
                "type": type,
                "description": description,
                "actions": actions,
                "conditions": conditions,
                "customIssueEventId": customIssueEventId,
                "from": _from,
                "properties": properties,
                "to": to,
                "transitionScreen": transitionScreen,
                "triggers": triggers,
                "validators": validators,
            }
        additional_properties = schemas.AnyTypeSchema
    
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actions"]) -> MetaOapg.properties.actions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> 'ConditionGroupUpdate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customIssueEventId"]) -> MetaOapg.properties.customIssueEventId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> 'TransitionUpdateDTOProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> 'StatusReferenceAndPort': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transitionScreen"]) -> 'WorkflowRuleConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triggers"]) -> MetaOapg.properties.triggers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validators"]) -> MetaOapg.properties.validators: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["type"], typing_extensions.Literal["description"], typing_extensions.Literal["actions"], typing_extensions.Literal["conditions"], typing_extensions.Literal["customIssueEventId"], typing_extensions.Literal["from"], typing_extensions.Literal["properties"], typing_extensions.Literal["to"], typing_extensions.Literal["transitionScreen"], typing_extensions.Literal["triggers"], typing_extensions.Literal["validators"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actions"]) -> typing.Union[MetaOapg.properties.actions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union['ConditionGroupUpdate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customIssueEventId"]) -> typing.Union[MetaOapg.properties.customIssueEventId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union['TransitionUpdateDTOProperties', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union['StatusReferenceAndPort', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transitionScreen"]) -> typing.Union['WorkflowRuleConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triggers"]) -> typing.Union[MetaOapg.properties.triggers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validators"]) -> typing.Union[MetaOapg.properties.validators, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["type"], typing_extensions.Literal["description"], typing_extensions.Literal["actions"], typing_extensions.Literal["conditions"], typing_extensions.Literal["customIssueEventId"], typing_extensions.Literal["from"], typing_extensions.Literal["properties"], typing_extensions.Literal["to"], typing_extensions.Literal["transitionScreen"], typing_extensions.Literal["triggers"], typing_extensions.Literal["validators"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        actions: typing.Union[MetaOapg.properties.actions, list, tuple, schemas.Unset] = schemas.unset,
        conditions: typing.Union['ConditionGroupUpdate', schemas.Unset] = schemas.unset,
        customIssueEventId: typing.Union[MetaOapg.properties.customIssueEventId, str, schemas.Unset] = schemas.unset,
        properties: typing.Union['TransitionUpdateDTOProperties', schemas.Unset] = schemas.unset,
        to: typing.Union['StatusReferenceAndPort', schemas.Unset] = schemas.unset,
        transitionScreen: typing.Union['WorkflowRuleConfiguration', schemas.Unset] = schemas.unset,
        triggers: typing.Union[MetaOapg.properties.triggers, list, tuple, schemas.Unset] = schemas.unset,
        validators: typing.Union[MetaOapg.properties.validators, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'TransitionUpdateDTO':
        return super().__new__(
            cls,
            *args,
            name=name,
            id=id,
            type=type,
            description=description,
            actions=actions,
            conditions=conditions,
            customIssueEventId=customIssueEventId,
            properties=properties,
            to=to,
            transitionScreen=transitionScreen,
            triggers=triggers,
            validators=validators,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.condition_group_update import ConditionGroupUpdate
from atlassian_jira_python_sdk.model.status_reference_and_port import StatusReferenceAndPort
from atlassian_jira_python_sdk.model.transition_update_dto_properties import TransitionUpdateDTOProperties
from atlassian_jira_python_sdk.model.workflow_rule_configuration import WorkflowRuleConfiguration
from atlassian_jira_python_sdk.model.workflow_trigger import WorkflowTrigger
