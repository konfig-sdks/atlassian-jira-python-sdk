# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class TimeTrackingDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Time tracking details.
    """


    class MetaOapg:
        
        class properties:
            originalEstimate = schemas.StrSchema
            originalEstimateSeconds = schemas.Int64Schema
            remainingEstimate = schemas.StrSchema
            remainingEstimateSeconds = schemas.Int64Schema
            timeSpent = schemas.StrSchema
            timeSpentSeconds = schemas.Int64Schema
            __annotations__ = {
                "originalEstimate": originalEstimate,
                "originalEstimateSeconds": originalEstimateSeconds,
                "remainingEstimate": remainingEstimate,
                "remainingEstimateSeconds": remainingEstimateSeconds,
                "timeSpent": timeSpent,
                "timeSpentSeconds": timeSpentSeconds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalEstimate"]) -> MetaOapg.properties.originalEstimate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalEstimateSeconds"]) -> MetaOapg.properties.originalEstimateSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remainingEstimate"]) -> MetaOapg.properties.remainingEstimate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remainingEstimateSeconds"]) -> MetaOapg.properties.remainingEstimateSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeSpent"]) -> MetaOapg.properties.timeSpent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeSpentSeconds"]) -> MetaOapg.properties.timeSpentSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["originalEstimate", "originalEstimateSeconds", "remainingEstimate", "remainingEstimateSeconds", "timeSpent", "timeSpentSeconds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalEstimate"]) -> typing.Union[MetaOapg.properties.originalEstimate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalEstimateSeconds"]) -> typing.Union[MetaOapg.properties.originalEstimateSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remainingEstimate"]) -> typing.Union[MetaOapg.properties.remainingEstimate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remainingEstimateSeconds"]) -> typing.Union[MetaOapg.properties.remainingEstimateSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeSpent"]) -> typing.Union[MetaOapg.properties.timeSpent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeSpentSeconds"]) -> typing.Union[MetaOapg.properties.timeSpentSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["originalEstimate", "originalEstimateSeconds", "remainingEstimate", "remainingEstimateSeconds", "timeSpent", "timeSpentSeconds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        originalEstimate: typing.Union[MetaOapg.properties.originalEstimate, str, schemas.Unset] = schemas.unset,
        originalEstimateSeconds: typing.Union[MetaOapg.properties.originalEstimateSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        remainingEstimate: typing.Union[MetaOapg.properties.remainingEstimate, str, schemas.Unset] = schemas.unset,
        remainingEstimateSeconds: typing.Union[MetaOapg.properties.remainingEstimateSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        timeSpent: typing.Union[MetaOapg.properties.timeSpent, str, schemas.Unset] = schemas.unset,
        timeSpentSeconds: typing.Union[MetaOapg.properties.timeSpentSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeTrackingDetails':
        return super().__new__(
            cls,
            *args,
            originalEstimate=originalEstimate,
            originalEstimateSeconds=originalEstimateSeconds,
            remainingEstimate=remainingEstimate,
            remainingEstimateSeconds=remainingEstimateSeconds,
            timeSpent=timeSpent,
            timeSpentSeconds=timeSpentSeconds,
            _configuration=_configuration,
            **kwargs,
        )
