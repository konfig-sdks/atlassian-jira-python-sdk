# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class SimplifiedHierarchyLevel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            aboveLevelId = schemas.Int64Schema
            belowLevelId = schemas.Int64Schema
            externalUuid = schemas.UUIDSchema
            hierarchyLevelNumber = schemas.Int32Schema
            id = schemas.Int64Schema
        
            @staticmethod
            def issueTypeIds() -> typing.Type['SimplifiedHierarchyLevelIssueTypeIds']:
                return SimplifiedHierarchyLevelIssueTypeIds
            level = schemas.Int32Schema
            name = schemas.StrSchema
            projectConfigurationId = schemas.Int64Schema
            __annotations__ = {
                "aboveLevelId": aboveLevelId,
                "belowLevelId": belowLevelId,
                "externalUuid": externalUuid,
                "hierarchyLevelNumber": hierarchyLevelNumber,
                "id": id,
                "issueTypeIds": issueTypeIds,
                "level": level,
                "name": name,
                "projectConfigurationId": projectConfigurationId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aboveLevelId"]) -> MetaOapg.properties.aboveLevelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["belowLevelId"]) -> MetaOapg.properties.belowLevelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalUuid"]) -> MetaOapg.properties.externalUuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hierarchyLevelNumber"]) -> MetaOapg.properties.hierarchyLevelNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueTypeIds"]) -> 'SimplifiedHierarchyLevelIssueTypeIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectConfigurationId"]) -> MetaOapg.properties.projectConfigurationId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["aboveLevelId", "belowLevelId", "externalUuid", "hierarchyLevelNumber", "id", "issueTypeIds", "level", "name", "projectConfigurationId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aboveLevelId"]) -> typing.Union[MetaOapg.properties.aboveLevelId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["belowLevelId"]) -> typing.Union[MetaOapg.properties.belowLevelId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalUuid"]) -> typing.Union[MetaOapg.properties.externalUuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hierarchyLevelNumber"]) -> typing.Union[MetaOapg.properties.hierarchyLevelNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueTypeIds"]) -> typing.Union['SimplifiedHierarchyLevelIssueTypeIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> typing.Union[MetaOapg.properties.level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectConfigurationId"]) -> typing.Union[MetaOapg.properties.projectConfigurationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["aboveLevelId", "belowLevelId", "externalUuid", "hierarchyLevelNumber", "id", "issueTypeIds", "level", "name", "projectConfigurationId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        aboveLevelId: typing.Union[MetaOapg.properties.aboveLevelId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        belowLevelId: typing.Union[MetaOapg.properties.belowLevelId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        externalUuid: typing.Union[MetaOapg.properties.externalUuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        hierarchyLevelNumber: typing.Union[MetaOapg.properties.hierarchyLevelNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        issueTypeIds: typing.Union['SimplifiedHierarchyLevelIssueTypeIds', schemas.Unset] = schemas.unset,
        level: typing.Union[MetaOapg.properties.level, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        projectConfigurationId: typing.Union[MetaOapg.properties.projectConfigurationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SimplifiedHierarchyLevel':
        return super().__new__(
            cls,
            *args,
            aboveLevelId=aboveLevelId,
            belowLevelId=belowLevelId,
            externalUuid=externalUuid,
            hierarchyLevelNumber=hierarchyLevelNumber,
            id=id,
            issueTypeIds=issueTypeIds,
            level=level,
            name=name,
            projectConfigurationId=projectConfigurationId,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.simplified_hierarchy_level_issue_type_ids import SimplifiedHierarchyLevelIssueTypeIds
