# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class IssuesJqlMetaDataBean(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The description of the page of issues loaded by the provided JQL query.
    """


    class MetaOapg:
        required = {
            "maxResults",
            "count",
            "totalCount",
            "startAt",
        }
        
        class properties:
            count = schemas.Int32Schema
            maxResults = schemas.Int32Schema
            startAt = schemas.Int64Schema
            totalCount = schemas.Int64Schema
        
            @staticmethod
            def validationWarnings() -> typing.Type['IssuesJqlMetaDataBeanValidationWarnings']:
                return IssuesJqlMetaDataBeanValidationWarnings
            __annotations__ = {
                "count": count,
                "maxResults": maxResults,
                "startAt": startAt,
                "totalCount": totalCount,
                "validationWarnings": validationWarnings,
            }
    
    maxResults: MetaOapg.properties.maxResults
    count: MetaOapg.properties.count
    totalCount: MetaOapg.properties.totalCount
    startAt: MetaOapg.properties.startAt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxResults"]) -> MetaOapg.properties.maxResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startAt"]) -> MetaOapg.properties.startAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCount"]) -> MetaOapg.properties.totalCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validationWarnings"]) -> 'IssuesJqlMetaDataBeanValidationWarnings': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["count", "maxResults", "startAt", "totalCount", "validationWarnings", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxResults"]) -> MetaOapg.properties.maxResults: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startAt"]) -> MetaOapg.properties.startAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCount"]) -> MetaOapg.properties.totalCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validationWarnings"]) -> typing.Union['IssuesJqlMetaDataBeanValidationWarnings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count", "maxResults", "startAt", "totalCount", "validationWarnings", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        maxResults: typing.Union[MetaOapg.properties.maxResults, decimal.Decimal, int, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, ],
        totalCount: typing.Union[MetaOapg.properties.totalCount, decimal.Decimal, int, ],
        startAt: typing.Union[MetaOapg.properties.startAt, decimal.Decimal, int, ],
        validationWarnings: typing.Union['IssuesJqlMetaDataBeanValidationWarnings', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IssuesJqlMetaDataBean':
        return super().__new__(
            cls,
            *args,
            maxResults=maxResults,
            count=count,
            totalCount=totalCount,
            startAt=startAt,
            validationWarnings=validationWarnings,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.issues_jql_meta_data_bean_validation_warnings import IssuesJqlMetaDataBeanValidationWarnings
