# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class WorkflowCapabilities(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class connectRules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AvailableWorkflowConnectRule']:
                        return AvailableWorkflowConnectRule
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AvailableWorkflowConnectRule'], typing.List['AvailableWorkflowConnectRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'connectRules':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AvailableWorkflowConnectRule':
                    return super().__getitem__(i)
            
            
            class editorScope(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PROJECT(cls):
                    return cls("PROJECT")
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
            
            
            class forgeRules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AvailableWorkflowForgeRule']:
                        return AvailableWorkflowForgeRule
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AvailableWorkflowForgeRule'], typing.List['AvailableWorkflowForgeRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'forgeRules':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AvailableWorkflowForgeRule':
                    return super().__getitem__(i)
        
            @staticmethod
            def projectTypes() -> typing.Type['WorkflowCapabilitiesProjectTypes']:
                return WorkflowCapabilitiesProjectTypes
            
            
            class systemRules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AvailableWorkflowSystemRule']:
                        return AvailableWorkflowSystemRule
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AvailableWorkflowSystemRule'], typing.List['AvailableWorkflowSystemRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'systemRules':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AvailableWorkflowSystemRule':
                    return super().__getitem__(i)
            
            
            class triggerRules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AvailableWorkflowTriggers']:
                        return AvailableWorkflowTriggers
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AvailableWorkflowTriggers'], typing.List['AvailableWorkflowTriggers']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'triggerRules':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AvailableWorkflowTriggers':
                    return super().__getitem__(i)
            __annotations__ = {
                "connectRules": connectRules,
                "editorScope": editorScope,
                "forgeRules": forgeRules,
                "projectTypes": projectTypes,
                "systemRules": systemRules,
                "triggerRules": triggerRules,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectRules"]) -> MetaOapg.properties.connectRules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editorScope"]) -> MetaOapg.properties.editorScope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forgeRules"]) -> MetaOapg.properties.forgeRules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectTypes"]) -> 'WorkflowCapabilitiesProjectTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemRules"]) -> MetaOapg.properties.systemRules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triggerRules"]) -> MetaOapg.properties.triggerRules: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["connectRules", "editorScope", "forgeRules", "projectTypes", "systemRules", "triggerRules", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectRules"]) -> typing.Union[MetaOapg.properties.connectRules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editorScope"]) -> typing.Union[MetaOapg.properties.editorScope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forgeRules"]) -> typing.Union[MetaOapg.properties.forgeRules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectTypes"]) -> typing.Union['WorkflowCapabilitiesProjectTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemRules"]) -> typing.Union[MetaOapg.properties.systemRules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triggerRules"]) -> typing.Union[MetaOapg.properties.triggerRules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connectRules", "editorScope", "forgeRules", "projectTypes", "systemRules", "triggerRules", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        connectRules: typing.Union[MetaOapg.properties.connectRules, list, tuple, schemas.Unset] = schemas.unset,
        editorScope: typing.Union[MetaOapg.properties.editorScope, str, schemas.Unset] = schemas.unset,
        forgeRules: typing.Union[MetaOapg.properties.forgeRules, list, tuple, schemas.Unset] = schemas.unset,
        projectTypes: typing.Union['WorkflowCapabilitiesProjectTypes', schemas.Unset] = schemas.unset,
        systemRules: typing.Union[MetaOapg.properties.systemRules, list, tuple, schemas.Unset] = schemas.unset,
        triggerRules: typing.Union[MetaOapg.properties.triggerRules, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowCapabilities':
        return super().__new__(
            cls,
            *args,
            connectRules=connectRules,
            editorScope=editorScope,
            forgeRules=forgeRules,
            projectTypes=projectTypes,
            systemRules=systemRules,
            triggerRules=triggerRules,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.available_workflow_connect_rule import AvailableWorkflowConnectRule
from atlassian_jira_python_sdk.model.available_workflow_forge_rule import AvailableWorkflowForgeRule
from atlassian_jira_python_sdk.model.available_workflow_system_rule import AvailableWorkflowSystemRule
from atlassian_jira_python_sdk.model.available_workflow_triggers import AvailableWorkflowTriggers
from atlassian_jira_python_sdk.model.workflow_capabilities_project_types import WorkflowCapabilitiesProjectTypes
