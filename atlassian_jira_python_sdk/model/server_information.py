# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class ServerInformation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about the Jira instance.
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            baseUrl = schemas.StrSchema
            buildDate = schemas.DateTimeSchema
            buildNumber = schemas.Int32Schema
            deploymentType = schemas.StrSchema
            displayUrl = schemas.StrSchema
            displayUrlServicedeskHelpCenter = schemas.StrSchema
            
            
            class healthChecks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['HealthCheckResult']:
                        return HealthCheckResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['HealthCheckResult'], typing.List['HealthCheckResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'healthChecks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'HealthCheckResult':
                    return super().__getitem__(i)
            scmInfo = schemas.StrSchema
            serverTime = schemas.DateTimeSchema
        
            @staticmethod
            def serverTimeZone() -> typing.Type['ServerInformationServerTimeZone']:
                return ServerInformationServerTimeZone
            serverTitle = schemas.StrSchema
        
            @staticmethod
            def versionNumbers() -> typing.Type['ServerInformationVersionNumbers']:
                return ServerInformationVersionNumbers
            __annotations__ = {
                "version": version,
                "baseUrl": baseUrl,
                "buildDate": buildDate,
                "buildNumber": buildNumber,
                "deploymentType": deploymentType,
                "displayUrl": displayUrl,
                "displayUrlServicedeskHelpCenter": displayUrlServicedeskHelpCenter,
                "healthChecks": healthChecks,
                "scmInfo": scmInfo,
                "serverTime": serverTime,
                "serverTimeZone": serverTimeZone,
                "serverTitle": serverTitle,
                "versionNumbers": versionNumbers,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseUrl"]) -> MetaOapg.properties.baseUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildDate"]) -> MetaOapg.properties.buildDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildNumber"]) -> MetaOapg.properties.buildNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploymentType"]) -> MetaOapg.properties.deploymentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayUrl"]) -> MetaOapg.properties.displayUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayUrlServicedeskHelpCenter"]) -> MetaOapg.properties.displayUrlServicedeskHelpCenter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthChecks"]) -> MetaOapg.properties.healthChecks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scmInfo"]) -> MetaOapg.properties.scmInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverTime"]) -> MetaOapg.properties.serverTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverTimeZone"]) -> 'ServerInformationServerTimeZone': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverTitle"]) -> MetaOapg.properties.serverTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionNumbers"]) -> 'ServerInformationVersionNumbers': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "baseUrl", "buildDate", "buildNumber", "deploymentType", "displayUrl", "displayUrlServicedeskHelpCenter", "healthChecks", "scmInfo", "serverTime", "serverTimeZone", "serverTitle", "versionNumbers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseUrl"]) -> typing.Union[MetaOapg.properties.baseUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildDate"]) -> typing.Union[MetaOapg.properties.buildDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildNumber"]) -> typing.Union[MetaOapg.properties.buildNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploymentType"]) -> typing.Union[MetaOapg.properties.deploymentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayUrl"]) -> typing.Union[MetaOapg.properties.displayUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayUrlServicedeskHelpCenter"]) -> typing.Union[MetaOapg.properties.displayUrlServicedeskHelpCenter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthChecks"]) -> typing.Union[MetaOapg.properties.healthChecks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scmInfo"]) -> typing.Union[MetaOapg.properties.scmInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverTime"]) -> typing.Union[MetaOapg.properties.serverTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverTimeZone"]) -> typing.Union['ServerInformationServerTimeZone', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverTitle"]) -> typing.Union[MetaOapg.properties.serverTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionNumbers"]) -> typing.Union['ServerInformationVersionNumbers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "baseUrl", "buildDate", "buildNumber", "deploymentType", "displayUrl", "displayUrlServicedeskHelpCenter", "healthChecks", "scmInfo", "serverTime", "serverTimeZone", "serverTitle", "versionNumbers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        baseUrl: typing.Union[MetaOapg.properties.baseUrl, str, schemas.Unset] = schemas.unset,
        buildDate: typing.Union[MetaOapg.properties.buildDate, str, datetime, schemas.Unset] = schemas.unset,
        buildNumber: typing.Union[MetaOapg.properties.buildNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        deploymentType: typing.Union[MetaOapg.properties.deploymentType, str, schemas.Unset] = schemas.unset,
        displayUrl: typing.Union[MetaOapg.properties.displayUrl, str, schemas.Unset] = schemas.unset,
        displayUrlServicedeskHelpCenter: typing.Union[MetaOapg.properties.displayUrlServicedeskHelpCenter, str, schemas.Unset] = schemas.unset,
        healthChecks: typing.Union[MetaOapg.properties.healthChecks, list, tuple, schemas.Unset] = schemas.unset,
        scmInfo: typing.Union[MetaOapg.properties.scmInfo, str, schemas.Unset] = schemas.unset,
        serverTime: typing.Union[MetaOapg.properties.serverTime, str, datetime, schemas.Unset] = schemas.unset,
        serverTimeZone: typing.Union['ServerInformationServerTimeZone', schemas.Unset] = schemas.unset,
        serverTitle: typing.Union[MetaOapg.properties.serverTitle, str, schemas.Unset] = schemas.unset,
        versionNumbers: typing.Union['ServerInformationVersionNumbers', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ServerInformation':
        return super().__new__(
            cls,
            *args,
            version=version,
            baseUrl=baseUrl,
            buildDate=buildDate,
            buildNumber=buildNumber,
            deploymentType=deploymentType,
            displayUrl=displayUrl,
            displayUrlServicedeskHelpCenter=displayUrlServicedeskHelpCenter,
            healthChecks=healthChecks,
            scmInfo=scmInfo,
            serverTime=serverTime,
            serverTimeZone=serverTimeZone,
            serverTitle=serverTitle,
            versionNumbers=versionNumbers,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.health_check_result import HealthCheckResult
from atlassian_jira_python_sdk.model.server_information_server_time_zone import ServerInformationServerTimeZone
from atlassian_jira_python_sdk.model.server_information_version_numbers import ServerInformationVersionNumbers
