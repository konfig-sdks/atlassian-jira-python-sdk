# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class SearchRequestBean(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def expand() -> typing.Type['SearchRequestBeanExpand']:
                return SearchRequestBeanExpand
        
            @staticmethod
            def fields() -> typing.Type['SearchRequestBeanFields']:
                return SearchRequestBeanFields
            fieldsByKeys = schemas.BoolSchema
            jql = schemas.StrSchema
            maxResults = schemas.Int32Schema
        
            @staticmethod
            def properties() -> typing.Type['SearchRequestBeanProperties']:
                return SearchRequestBeanProperties
            startAt = schemas.Int32Schema
            
            
            class validateQuery(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def STRICT(cls):
                    return cls("strict")
                
                @schemas.classproperty
                def WARN(cls):
                    return cls("warn")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("none")
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
            __annotations__ = {
                "expand": expand,
                "fields": fields,
                "fieldsByKeys": fieldsByKeys,
                "jql": jql,
                "maxResults": maxResults,
                "properties": properties,
                "startAt": startAt,
                "validateQuery": validateQuery,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expand"]) -> 'SearchRequestBeanExpand': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'SearchRequestBeanFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldsByKeys"]) -> MetaOapg.properties.fieldsByKeys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jql"]) -> MetaOapg.properties.jql: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxResults"]) -> MetaOapg.properties.maxResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> 'SearchRequestBeanProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startAt"]) -> MetaOapg.properties.startAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validateQuery"]) -> MetaOapg.properties.validateQuery: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expand", "fields", "fieldsByKeys", "jql", "maxResults", "properties", "startAt", "validateQuery", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expand"]) -> typing.Union['SearchRequestBeanExpand', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['SearchRequestBeanFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldsByKeys"]) -> typing.Union[MetaOapg.properties.fieldsByKeys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jql"]) -> typing.Union[MetaOapg.properties.jql, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxResults"]) -> typing.Union[MetaOapg.properties.maxResults, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union['SearchRequestBeanProperties', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startAt"]) -> typing.Union[MetaOapg.properties.startAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validateQuery"]) -> typing.Union[MetaOapg.properties.validateQuery, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expand", "fields", "fieldsByKeys", "jql", "maxResults", "properties", "startAt", "validateQuery", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        expand: typing.Union['SearchRequestBeanExpand', schemas.Unset] = schemas.unset,
        fields: typing.Union['SearchRequestBeanFields', schemas.Unset] = schemas.unset,
        fieldsByKeys: typing.Union[MetaOapg.properties.fieldsByKeys, bool, schemas.Unset] = schemas.unset,
        jql: typing.Union[MetaOapg.properties.jql, str, schemas.Unset] = schemas.unset,
        maxResults: typing.Union[MetaOapg.properties.maxResults, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        properties: typing.Union['SearchRequestBeanProperties', schemas.Unset] = schemas.unset,
        startAt: typing.Union[MetaOapg.properties.startAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        validateQuery: typing.Union[MetaOapg.properties.validateQuery, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchRequestBean':
        return super().__new__(
            cls,
            *args,
            expand=expand,
            fields=fields,
            fieldsByKeys=fieldsByKeys,
            jql=jql,
            maxResults=maxResults,
            properties=properties,
            startAt=startAt,
            validateQuery=validateQuery,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.search_request_bean_expand import SearchRequestBeanExpand
from atlassian_jira_python_sdk.model.search_request_bean_fields import SearchRequestBeanFields
from atlassian_jira_python_sdk.model.search_request_bean_properties import SearchRequestBeanProperties
