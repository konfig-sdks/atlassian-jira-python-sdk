# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class CustomFieldContext(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The details of a custom field context.
    """


    class MetaOapg:
        required = {
            "name",
            "description",
            "id",
            "isAnyIssueType",
            "isGlobalContext",
        }
        
        class properties:
            description = schemas.StrSchema
            id = schemas.StrSchema
            isAnyIssueType = schemas.BoolSchema
            isGlobalContext = schemas.BoolSchema
            name = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "id": id,
                "isAnyIssueType": isAnyIssueType,
                "isGlobalContext": isGlobalContext,
                "name": name,
            }
    
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    isAnyIssueType: MetaOapg.properties.isAnyIssueType
    isGlobalContext: MetaOapg.properties.isGlobalContext
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAnyIssueType"]) -> MetaOapg.properties.isAnyIssueType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isGlobalContext"]) -> MetaOapg.properties.isGlobalContext: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "isAnyIssueType", "isGlobalContext", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAnyIssueType"]) -> MetaOapg.properties.isAnyIssueType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isGlobalContext"]) -> MetaOapg.properties.isGlobalContext: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "isAnyIssueType", "isGlobalContext", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        isAnyIssueType: typing.Union[MetaOapg.properties.isAnyIssueType, bool, ],
        isGlobalContext: typing.Union[MetaOapg.properties.isGlobalContext, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomFieldContext':
        return super().__new__(
            cls,
            *args,
            name=name,
            description=description,
            id=id,
            isAnyIssueType=isAnyIssueType,
            isGlobalContext=isGlobalContext,
            _configuration=_configuration,
            **kwargs,
        )
