# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class WorkflowElementReference(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A reference to the location of the error. This will be null if the error does not refer to a specific element.
    """


    class MetaOapg:
        
        class properties:
            propertyKey = schemas.StrSchema
            ruleId = schemas.StrSchema
        
            @staticmethod
            def statusMappingReference() -> typing.Type['ProjectAndIssueTypePair']:
                return ProjectAndIssueTypePair
            statusReference = schemas.StrSchema
            transitionId = schemas.StrSchema
            __annotations__ = {
                "propertyKey": propertyKey,
                "ruleId": ruleId,
                "statusMappingReference": statusMappingReference,
                "statusReference": statusReference,
                "transitionId": transitionId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["propertyKey"]) -> MetaOapg.properties.propertyKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ruleId"]) -> MetaOapg.properties.ruleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusMappingReference"]) -> 'ProjectAndIssueTypePair': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusReference"]) -> MetaOapg.properties.statusReference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transitionId"]) -> MetaOapg.properties.transitionId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["propertyKey", "ruleId", "statusMappingReference", "statusReference", "transitionId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["propertyKey"]) -> typing.Union[MetaOapg.properties.propertyKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ruleId"]) -> typing.Union[MetaOapg.properties.ruleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusMappingReference"]) -> typing.Union['ProjectAndIssueTypePair', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusReference"]) -> typing.Union[MetaOapg.properties.statusReference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transitionId"]) -> typing.Union[MetaOapg.properties.transitionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["propertyKey", "ruleId", "statusMappingReference", "statusReference", "transitionId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        propertyKey: typing.Union[MetaOapg.properties.propertyKey, str, schemas.Unset] = schemas.unset,
        ruleId: typing.Union[MetaOapg.properties.ruleId, str, schemas.Unset] = schemas.unset,
        statusMappingReference: typing.Union['ProjectAndIssueTypePair', schemas.Unset] = schemas.unset,
        statusReference: typing.Union[MetaOapg.properties.statusReference, str, schemas.Unset] = schemas.unset,
        transitionId: typing.Union[MetaOapg.properties.transitionId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowElementReference':
        return super().__new__(
            cls,
            *args,
            propertyKey=propertyKey,
            ruleId=ruleId,
            statusMappingReference=statusMappingReference,
            statusReference=statusReference,
            transitionId=transitionId,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.project_and_issue_type_pair import ProjectAndIssueTypePair
