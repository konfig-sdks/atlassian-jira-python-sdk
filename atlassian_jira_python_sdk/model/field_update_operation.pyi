# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class FieldUpdateOperation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of an operation to perform on a field.
    """


    class MetaOapg:
        
        class properties:
            add = schemas.AnyTypeSchema
            copy = schemas.AnyTypeSchema
            edit = schemas.AnyTypeSchema
            remove = schemas.AnyTypeSchema
            set = schemas.AnyTypeSchema
            __annotations__ = {
                "add": add,
                "copy": copy,
                "edit": edit,
                "remove": remove,
                "set": set,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add"]) -> MetaOapg.properties.add: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copy"]) -> MetaOapg.properties.copy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit"]) -> MetaOapg.properties.edit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remove"]) -> MetaOapg.properties.remove: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["set"]) -> MetaOapg.properties.set: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["add", "copy", "edit", "remove", "set", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add"]) -> typing.Union[MetaOapg.properties.add, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copy"]) -> typing.Union[MetaOapg.properties.copy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit"]) -> typing.Union[MetaOapg.properties.edit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remove"]) -> typing.Union[MetaOapg.properties.remove, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["set"]) -> typing.Union[MetaOapg.properties.set, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["add", "copy", "edit", "remove", "set", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        add: typing.Union[MetaOapg.properties.add, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        copy: typing.Union[MetaOapg.properties.copy, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        edit: typing.Union[MetaOapg.properties.edit, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        remove: typing.Union[MetaOapg.properties.remove, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        set: typing.Union[MetaOapg.properties.set, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FieldUpdateOperation':
        return super().__new__(
            cls,
            *args,
            add=add,
            copy=copy,
            edit=edit,
            remove=remove,
            set=set,
            _configuration=_configuration,
            **kwargs,
        )
