# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class Configuration(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about the configuration of Jira.
    """


    class MetaOapg:
        
        class properties:
            attachmentsEnabled = schemas.BoolSchema
            issueLinkingEnabled = schemas.BoolSchema
            subTasksEnabled = schemas.BoolSchema
        
            @staticmethod
            def timeTrackingConfiguration() -> typing.Type['TimeTrackingConfiguration']:
                return TimeTrackingConfiguration
            timeTrackingEnabled = schemas.BoolSchema
            unassignedIssuesAllowed = schemas.BoolSchema
            votingEnabled = schemas.BoolSchema
            watchingEnabled = schemas.BoolSchema
            __annotations__ = {
                "attachmentsEnabled": attachmentsEnabled,
                "issueLinkingEnabled": issueLinkingEnabled,
                "subTasksEnabled": subTasksEnabled,
                "timeTrackingConfiguration": timeTrackingConfiguration,
                "timeTrackingEnabled": timeTrackingEnabled,
                "unassignedIssuesAllowed": unassignedIssuesAllowed,
                "votingEnabled": votingEnabled,
                "watchingEnabled": watchingEnabled,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachmentsEnabled"]) -> MetaOapg.properties.attachmentsEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueLinkingEnabled"]) -> MetaOapg.properties.issueLinkingEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subTasksEnabled"]) -> MetaOapg.properties.subTasksEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeTrackingConfiguration"]) -> 'TimeTrackingConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeTrackingEnabled"]) -> MetaOapg.properties.timeTrackingEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unassignedIssuesAllowed"]) -> MetaOapg.properties.unassignedIssuesAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["votingEnabled"]) -> MetaOapg.properties.votingEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watchingEnabled"]) -> MetaOapg.properties.watchingEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attachmentsEnabled", "issueLinkingEnabled", "subTasksEnabled", "timeTrackingConfiguration", "timeTrackingEnabled", "unassignedIssuesAllowed", "votingEnabled", "watchingEnabled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachmentsEnabled"]) -> typing.Union[MetaOapg.properties.attachmentsEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueLinkingEnabled"]) -> typing.Union[MetaOapg.properties.issueLinkingEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subTasksEnabled"]) -> typing.Union[MetaOapg.properties.subTasksEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeTrackingConfiguration"]) -> typing.Union['TimeTrackingConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeTrackingEnabled"]) -> typing.Union[MetaOapg.properties.timeTrackingEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unassignedIssuesAllowed"]) -> typing.Union[MetaOapg.properties.unassignedIssuesAllowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["votingEnabled"]) -> typing.Union[MetaOapg.properties.votingEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watchingEnabled"]) -> typing.Union[MetaOapg.properties.watchingEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attachmentsEnabled", "issueLinkingEnabled", "subTasksEnabled", "timeTrackingConfiguration", "timeTrackingEnabled", "unassignedIssuesAllowed", "votingEnabled", "watchingEnabled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        attachmentsEnabled: typing.Union[MetaOapg.properties.attachmentsEnabled, bool, schemas.Unset] = schemas.unset,
        issueLinkingEnabled: typing.Union[MetaOapg.properties.issueLinkingEnabled, bool, schemas.Unset] = schemas.unset,
        subTasksEnabled: typing.Union[MetaOapg.properties.subTasksEnabled, bool, schemas.Unset] = schemas.unset,
        timeTrackingConfiguration: typing.Union['TimeTrackingConfiguration', schemas.Unset] = schemas.unset,
        timeTrackingEnabled: typing.Union[MetaOapg.properties.timeTrackingEnabled, bool, schemas.Unset] = schemas.unset,
        unassignedIssuesAllowed: typing.Union[MetaOapg.properties.unassignedIssuesAllowed, bool, schemas.Unset] = schemas.unset,
        votingEnabled: typing.Union[MetaOapg.properties.votingEnabled, bool, schemas.Unset] = schemas.unset,
        watchingEnabled: typing.Union[MetaOapg.properties.watchingEnabled, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Configuration':
        return super().__new__(
            cls,
            *args,
            attachmentsEnabled=attachmentsEnabled,
            issueLinkingEnabled=issueLinkingEnabled,
            subTasksEnabled=subTasksEnabled,
            timeTrackingConfiguration=timeTrackingConfiguration,
            timeTrackingEnabled=timeTrackingEnabled,
            unassignedIssuesAllowed=unassignedIssuesAllowed,
            votingEnabled=votingEnabled,
            watchingEnabled=watchingEnabled,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.time_tracking_configuration import TimeTrackingConfiguration
