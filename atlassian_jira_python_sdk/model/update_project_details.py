# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class UpdateProjectDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about the project.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            
            
            class assigneeType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PROJECT_LEAD": "PROJECT_LEAD",
                        "UNASSIGNED": "UNASSIGNED",
                    }
                
                @schemas.classproperty
                def PROJECT_LEAD(cls):
                    return cls("PROJECT_LEAD")
                
                @schemas.classproperty
                def UNASSIGNED(cls):
                    return cls("UNASSIGNED")
            avatarId = schemas.Int64Schema
            categoryId = schemas.Int64Schema
            issueSecurityScheme = schemas.Int64Schema
            key = schemas.StrSchema
            lead = schemas.StrSchema
            
            
            class leadAccountId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 128
            name = schemas.StrSchema
            notificationScheme = schemas.Int64Schema
            permissionScheme = schemas.Int64Schema
            url = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "assigneeType": assigneeType,
                "avatarId": avatarId,
                "categoryId": categoryId,
                "issueSecurityScheme": issueSecurityScheme,
                "key": key,
                "lead": lead,
                "leadAccountId": leadAccountId,
                "name": name,
                "notificationScheme": notificationScheme,
                "permissionScheme": permissionScheme,
                "url": url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigneeType"]) -> MetaOapg.properties.assigneeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatarId"]) -> MetaOapg.properties.avatarId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categoryId"]) -> MetaOapg.properties.categoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueSecurityScheme"]) -> MetaOapg.properties.issueSecurityScheme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lead"]) -> MetaOapg.properties.lead: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leadAccountId"]) -> MetaOapg.properties.leadAccountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationScheme"]) -> MetaOapg.properties.notificationScheme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissionScheme"]) -> MetaOapg.properties.permissionScheme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "assigneeType", "avatarId", "categoryId", "issueSecurityScheme", "key", "lead", "leadAccountId", "name", "notificationScheme", "permissionScheme", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigneeType"]) -> typing.Union[MetaOapg.properties.assigneeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatarId"]) -> typing.Union[MetaOapg.properties.avatarId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categoryId"]) -> typing.Union[MetaOapg.properties.categoryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueSecurityScheme"]) -> typing.Union[MetaOapg.properties.issueSecurityScheme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lead"]) -> typing.Union[MetaOapg.properties.lead, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leadAccountId"]) -> typing.Union[MetaOapg.properties.leadAccountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationScheme"]) -> typing.Union[MetaOapg.properties.notificationScheme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissionScheme"]) -> typing.Union[MetaOapg.properties.permissionScheme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "assigneeType", "avatarId", "categoryId", "issueSecurityScheme", "key", "lead", "leadAccountId", "name", "notificationScheme", "permissionScheme", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        assigneeType: typing.Union[MetaOapg.properties.assigneeType, str, schemas.Unset] = schemas.unset,
        avatarId: typing.Union[MetaOapg.properties.avatarId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        categoryId: typing.Union[MetaOapg.properties.categoryId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        issueSecurityScheme: typing.Union[MetaOapg.properties.issueSecurityScheme, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
        lead: typing.Union[MetaOapg.properties.lead, str, schemas.Unset] = schemas.unset,
        leadAccountId: typing.Union[MetaOapg.properties.leadAccountId, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        notificationScheme: typing.Union[MetaOapg.properties.notificationScheme, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        permissionScheme: typing.Union[MetaOapg.properties.permissionScheme, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateProjectDetails':
        return super().__new__(
            cls,
            *args,
            description=description,
            assigneeType=assigneeType,
            avatarId=avatarId,
            categoryId=categoryId,
            issueSecurityScheme=issueSecurityScheme,
            key=key,
            lead=lead,
            leadAccountId=leadAccountId,
            name=name,
            notificationScheme=notificationScheme,
            permissionScheme=permissionScheme,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )
