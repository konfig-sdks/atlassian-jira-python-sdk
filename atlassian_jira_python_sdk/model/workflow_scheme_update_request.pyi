# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class WorkflowSchemeUpdateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The update workflow scheme payload.
    """


    class MetaOapg:
        required = {
            "name",
            "description",
            "id",
            "version",
        }
        
        class properties:
            description = schemas.StrSchema
        
            @staticmethod
            def version() -> typing.Type['DocumentVersion']:
                return DocumentVersion
            id = schemas.StrSchema
            name = schemas.StrSchema
            defaultWorkflowId = schemas.StrSchema
            
            
            class statusMappingsByIssueTypeOverride(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MappingsByIssueTypeOverride']:
                        return MappingsByIssueTypeOverride
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MappingsByIssueTypeOverride'], typing.List['MappingsByIssueTypeOverride']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statusMappingsByIssueTypeOverride':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MappingsByIssueTypeOverride':
                    return super().__getitem__(i)
            
            
            class statusMappingsByWorkflows(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MappingsByWorkflow']:
                        return MappingsByWorkflow
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MappingsByWorkflow'], typing.List['MappingsByWorkflow']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statusMappingsByWorkflows':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MappingsByWorkflow':
                    return super().__getitem__(i)
            
            
            class workflowsForIssueTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowSchemeAssociation']:
                        return WorkflowSchemeAssociation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowSchemeAssociation'], typing.List['WorkflowSchemeAssociation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowsForIssueTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowSchemeAssociation':
                    return super().__getitem__(i)
            __annotations__ = {
                "description": description,
                "version": version,
                "id": id,
                "name": name,
                "defaultWorkflowId": defaultWorkflowId,
                "statusMappingsByIssueTypeOverride": statusMappingsByIssueTypeOverride,
                "statusMappingsByWorkflows": statusMappingsByWorkflows,
                "workflowsForIssueTypes": workflowsForIssueTypes,
            }
        additional_properties = schemas.AnyTypeSchema
    
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    version: 'DocumentVersion'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> 'DocumentVersion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultWorkflowId"]) -> MetaOapg.properties.defaultWorkflowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusMappingsByIssueTypeOverride"]) -> MetaOapg.properties.statusMappingsByIssueTypeOverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusMappingsByWorkflows"]) -> MetaOapg.properties.statusMappingsByWorkflows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowsForIssueTypes"]) -> MetaOapg.properties.workflowsForIssueTypes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["id"], typing_extensions.Literal["version"], typing_extensions.Literal["defaultWorkflowId"], typing_extensions.Literal["statusMappingsByIssueTypeOverride"], typing_extensions.Literal["statusMappingsByWorkflows"], typing_extensions.Literal["workflowsForIssueTypes"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> 'DocumentVersion': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultWorkflowId"]) -> typing.Union[MetaOapg.properties.defaultWorkflowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusMappingsByIssueTypeOverride"]) -> typing.Union[MetaOapg.properties.statusMappingsByIssueTypeOverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusMappingsByWorkflows"]) -> typing.Union[MetaOapg.properties.statusMappingsByWorkflows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowsForIssueTypes"]) -> typing.Union[MetaOapg.properties.workflowsForIssueTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["id"], typing_extensions.Literal["version"], typing_extensions.Literal["defaultWorkflowId"], typing_extensions.Literal["statusMappingsByIssueTypeOverride"], typing_extensions.Literal["statusMappingsByWorkflows"], typing_extensions.Literal["workflowsForIssueTypes"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        version: 'DocumentVersion',
        defaultWorkflowId: typing.Union[MetaOapg.properties.defaultWorkflowId, str, schemas.Unset] = schemas.unset,
        statusMappingsByIssueTypeOverride: typing.Union[MetaOapg.properties.statusMappingsByIssueTypeOverride, list, tuple, schemas.Unset] = schemas.unset,
        statusMappingsByWorkflows: typing.Union[MetaOapg.properties.statusMappingsByWorkflows, list, tuple, schemas.Unset] = schemas.unset,
        workflowsForIssueTypes: typing.Union[MetaOapg.properties.workflowsForIssueTypes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'WorkflowSchemeUpdateRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            description=description,
            id=id,
            version=version,
            defaultWorkflowId=defaultWorkflowId,
            statusMappingsByIssueTypeOverride=statusMappingsByIssueTypeOverride,
            statusMappingsByWorkflows=statusMappingsByWorkflows,
            workflowsForIssueTypes=workflowsForIssueTypes,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.document_version import DocumentVersion
from atlassian_jira_python_sdk.model.mappings_by_issue_type_override import MappingsByIssueTypeOverride
from atlassian_jira_python_sdk.model.mappings_by_workflow import MappingsByWorkflow
from atlassian_jira_python_sdk.model.workflow_scheme_association import WorkflowSchemeAssociation
