# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class ConnectCustomFieldValue(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A list of custom field details.
    """


    class MetaOapg:
        required = {
            "issueID",
            "_type",
            "fieldID",
        }
        
        class properties:
            
            
            class _type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "StringIssueField": "STRING_ISSUE_FIELD",
                        "NumberIssueField": "NUMBER_ISSUE_FIELD",
                        "RichTextIssueField": "RICH_TEXT_ISSUE_FIELD",
                        "SingleSelectIssueField": "SINGLE_SELECT_ISSUE_FIELD",
                        "MultiSelectIssueField": "MULTI_SELECT_ISSUE_FIELD",
                        "TextIssueField": "TEXT_ISSUE_FIELD",
                    }
                
                @schemas.classproperty
                def STRING_ISSUE_FIELD(cls):
                    return cls("StringIssueField")
                
                @schemas.classproperty
                def NUMBER_ISSUE_FIELD(cls):
                    return cls("NumberIssueField")
                
                @schemas.classproperty
                def RICH_TEXT_ISSUE_FIELD(cls):
                    return cls("RichTextIssueField")
                
                @schemas.classproperty
                def SINGLE_SELECT_ISSUE_FIELD(cls):
                    return cls("SingleSelectIssueField")
                
                @schemas.classproperty
                def MULTI_SELECT_ISSUE_FIELD(cls):
                    return cls("MultiSelectIssueField")
                
                @schemas.classproperty
                def TEXT_ISSUE_FIELD(cls):
                    return cls("TextIssueField")
            fieldID = schemas.IntSchema
            issueID = schemas.IntSchema
            number = schemas.NumberSchema
            optionID = schemas.StrSchema
            richText = schemas.StrSchema
            string = schemas.StrSchema
            text = schemas.StrSchema
            __annotations__ = {
                "_type": _type,
                "fieldID": fieldID,
                "issueID": issueID,
                "number": number,
                "optionID": optionID,
                "richText": richText,
                "string": string,
                "text": text,
            }
    
    issueID: MetaOapg.properties.issueID
    _type: MetaOapg.properties._type
    fieldID: MetaOapg.properties.fieldID
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_type"]) -> MetaOapg.properties._type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldID"]) -> MetaOapg.properties.fieldID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueID"]) -> MetaOapg.properties.issueID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionID"]) -> MetaOapg.properties.optionID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["richText"]) -> MetaOapg.properties.richText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["string"]) -> MetaOapg.properties.string: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_type", "fieldID", "issueID", "number", "optionID", "richText", "string", "text", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_type"]) -> MetaOapg.properties._type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldID"]) -> MetaOapg.properties.fieldID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueID"]) -> MetaOapg.properties.issueID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionID"]) -> typing.Union[MetaOapg.properties.optionID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["richText"]) -> typing.Union[MetaOapg.properties.richText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["string"]) -> typing.Union[MetaOapg.properties.string, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_type", "fieldID", "issueID", "number", "optionID", "richText", "string", "text", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        issueID: typing.Union[MetaOapg.properties.issueID, decimal.Decimal, int, ],
        _type: typing.Union[MetaOapg.properties._type, str, ],
        fieldID: typing.Union[MetaOapg.properties.fieldID, decimal.Decimal, int, ],
        number: typing.Union[MetaOapg.properties.number, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        optionID: typing.Union[MetaOapg.properties.optionID, str, schemas.Unset] = schemas.unset,
        richText: typing.Union[MetaOapg.properties.richText, str, schemas.Unset] = schemas.unset,
        string: typing.Union[MetaOapg.properties.string, str, schemas.Unset] = schemas.unset,
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectCustomFieldValue':
        return super().__new__(
            cls,
            *args,
            issueID=issueID,
            _type=_type,
            fieldID=fieldID,
            number=number,
            optionID=optionID,
            richText=richText,
            string=string,
            text=text,
            _configuration=_configuration,
            **kwargs,
        )
