# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class AuditRecordBean(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An audit record.
    """


    class MetaOapg:
        
        class properties:
            summary = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class associatedItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AssociatedItemBean']:
                        return AssociatedItemBean
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AssociatedItemBean'], typing.List['AssociatedItemBean']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associatedItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AssociatedItemBean':
                    return super().__getitem__(i)
            authorKey = schemas.StrSchema
            category = schemas.StrSchema
            
            
            class changedValues(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ChangedValueBean']:
                        return ChangedValueBean
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ChangedValueBean'], typing.List['ChangedValueBean']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'changedValues':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ChangedValueBean':
                    return super().__getitem__(i)
            created = schemas.DateTimeSchema
            eventSource = schemas.StrSchema
            id = schemas.Int64Schema
        
            @staticmethod
            def objectItem() -> typing.Type['AssociatedItemBean']:
                return AssociatedItemBean
            remoteAddress = schemas.StrSchema
            __annotations__ = {
                "summary": summary,
                "description": description,
                "associatedItems": associatedItems,
                "authorKey": authorKey,
                "category": category,
                "changedValues": changedValues,
                "created": created,
                "eventSource": eventSource,
                "id": id,
                "objectItem": objectItem,
                "remoteAddress": remoteAddress,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedItems"]) -> MetaOapg.properties.associatedItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorKey"]) -> MetaOapg.properties.authorKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changedValues"]) -> MetaOapg.properties.changedValues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventSource"]) -> MetaOapg.properties.eventSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectItem"]) -> 'AssociatedItemBean': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remoteAddress"]) -> MetaOapg.properties.remoteAddress: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["summary", "description", "associatedItems", "authorKey", "category", "changedValues", "created", "eventSource", "id", "objectItem", "remoteAddress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedItems"]) -> typing.Union[MetaOapg.properties.associatedItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorKey"]) -> typing.Union[MetaOapg.properties.authorKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changedValues"]) -> typing.Union[MetaOapg.properties.changedValues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventSource"]) -> typing.Union[MetaOapg.properties.eventSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectItem"]) -> typing.Union['AssociatedItemBean', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remoteAddress"]) -> typing.Union[MetaOapg.properties.remoteAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["summary", "description", "associatedItems", "authorKey", "category", "changedValues", "created", "eventSource", "id", "objectItem", "remoteAddress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        associatedItems: typing.Union[MetaOapg.properties.associatedItems, list, tuple, schemas.Unset] = schemas.unset,
        authorKey: typing.Union[MetaOapg.properties.authorKey, str, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        changedValues: typing.Union[MetaOapg.properties.changedValues, list, tuple, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        eventSource: typing.Union[MetaOapg.properties.eventSource, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        objectItem: typing.Union['AssociatedItemBean', schemas.Unset] = schemas.unset,
        remoteAddress: typing.Union[MetaOapg.properties.remoteAddress, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuditRecordBean':
        return super().__new__(
            cls,
            *args,
            summary=summary,
            description=description,
            associatedItems=associatedItems,
            authorKey=authorKey,
            category=category,
            changedValues=changedValues,
            created=created,
            eventSource=eventSource,
            id=id,
            objectItem=objectItem,
            remoteAddress=remoteAddress,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.associated_item_bean import AssociatedItemBean
from atlassian_jira_python_sdk.model.changed_value_bean import ChangedValueBean
