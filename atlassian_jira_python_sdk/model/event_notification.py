# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class EventNotification(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about a notification associated with an event.
    """


    class MetaOapg:
        
        class properties:
            emailAddress = schemas.StrSchema
            expand = schemas.StrSchema
        
            @staticmethod
            def field() -> typing.Type['FieldDetails']:
                return FieldDetails
        
            @staticmethod
            def group() -> typing.Type['GroupName']:
                return GroupName
            id = schemas.Int64Schema
            
            
            class notificationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CurrentAssignee": "CURRENT_ASSIGNEE",
                        "Reporter": "REPORTER",
                        "CurrentUser": "CURRENT_USER",
                        "ProjectLead": "PROJECT_LEAD",
                        "ComponentLead": "COMPONENT_LEAD",
                        "User": "USER",
                        "Group": "GROUP",
                        "ProjectRole": "PROJECT_ROLE",
                        "EmailAddress": "EMAIL_ADDRESS",
                        "AllWatchers": "ALL_WATCHERS",
                        "UserCustomField": "USER_CUSTOM_FIELD",
                        "GroupCustomField": "GROUP_CUSTOM_FIELD",
                    }
                
                @schemas.classproperty
                def CURRENT_ASSIGNEE(cls):
                    return cls("CurrentAssignee")
                
                @schemas.classproperty
                def REPORTER(cls):
                    return cls("Reporter")
                
                @schemas.classproperty
                def CURRENT_USER(cls):
                    return cls("CurrentUser")
                
                @schemas.classproperty
                def PROJECT_LEAD(cls):
                    return cls("ProjectLead")
                
                @schemas.classproperty
                def COMPONENT_LEAD(cls):
                    return cls("ComponentLead")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("User")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("Group")
                
                @schemas.classproperty
                def PROJECT_ROLE(cls):
                    return cls("ProjectRole")
                
                @schemas.classproperty
                def EMAIL_ADDRESS(cls):
                    return cls("EmailAddress")
                
                @schemas.classproperty
                def ALL_WATCHERS(cls):
                    return cls("AllWatchers")
                
                @schemas.classproperty
                def USER_CUSTOM_FIELD(cls):
                    return cls("UserCustomField")
                
                @schemas.classproperty
                def GROUP_CUSTOM_FIELD(cls):
                    return cls("GroupCustomField")
            parameter = schemas.StrSchema
        
            @staticmethod
            def projectRole() -> typing.Type['ProjectRole']:
                return ProjectRole
            recipient = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['UserDetails']:
                return UserDetails
            __annotations__ = {
                "emailAddress": emailAddress,
                "expand": expand,
                "field": field,
                "group": group,
                "id": id,
                "notificationType": notificationType,
                "parameter": parameter,
                "projectRole": projectRole,
                "recipient": recipient,
                "user": user,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailAddress"]) -> MetaOapg.properties.emailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expand"]) -> MetaOapg.properties.expand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field"]) -> 'FieldDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'GroupName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationType"]) -> MetaOapg.properties.notificationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameter"]) -> MetaOapg.properties.parameter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectRole"]) -> 'ProjectRole': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient"]) -> MetaOapg.properties.recipient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'UserDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["emailAddress", "expand", "field", "group", "id", "notificationType", "parameter", "projectRole", "recipient", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailAddress"]) -> typing.Union[MetaOapg.properties.emailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expand"]) -> typing.Union[MetaOapg.properties.expand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field"]) -> typing.Union['FieldDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union['GroupName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationType"]) -> typing.Union[MetaOapg.properties.notificationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameter"]) -> typing.Union[MetaOapg.properties.parameter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectRole"]) -> typing.Union['ProjectRole', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient"]) -> typing.Union[MetaOapg.properties.recipient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['UserDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["emailAddress", "expand", "field", "group", "id", "notificationType", "parameter", "projectRole", "recipient", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        emailAddress: typing.Union[MetaOapg.properties.emailAddress, str, schemas.Unset] = schemas.unset,
        expand: typing.Union[MetaOapg.properties.expand, str, schemas.Unset] = schemas.unset,
        field: typing.Union['FieldDetails', schemas.Unset] = schemas.unset,
        group: typing.Union['GroupName', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        notificationType: typing.Union[MetaOapg.properties.notificationType, str, schemas.Unset] = schemas.unset,
        parameter: typing.Union[MetaOapg.properties.parameter, str, schemas.Unset] = schemas.unset,
        projectRole: typing.Union['ProjectRole', schemas.Unset] = schemas.unset,
        recipient: typing.Union[MetaOapg.properties.recipient, str, schemas.Unset] = schemas.unset,
        user: typing.Union['UserDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventNotification':
        return super().__new__(
            cls,
            *args,
            emailAddress=emailAddress,
            expand=expand,
            field=field,
            group=group,
            id=id,
            notificationType=notificationType,
            parameter=parameter,
            projectRole=projectRole,
            recipient=recipient,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.field_details import FieldDetails
from atlassian_jira_python_sdk.model.group_name import GroupName
from atlassian_jira_python_sdk.model.project_role import ProjectRole
from atlassian_jira_python_sdk.model.user_details import UserDetails
