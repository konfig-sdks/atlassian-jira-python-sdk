# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class Transition(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of a workflow transition.
    """


    class MetaOapg:
        required = {
            "name",
            "description",
            "from",
            "id",
            "to",
            "type",
        }
        
        class properties:
            description = schemas.StrSchema
        
            @staticmethod
            def _from() -> typing.Type['TransitionFrom']:
                return TransitionFrom
            id = schemas.StrSchema
            name = schemas.StrSchema
            to = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "global": "GLOBAL",
                        "initial": "INITIAL",
                        "directed": "DIRECTED",
                    }
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("global")
                
                @schemas.classproperty
                def INITIAL(cls):
                    return cls("initial")
                
                @schemas.classproperty
                def DIRECTED(cls):
                    return cls("directed")
        
            @staticmethod
            def properties() -> typing.Type['TransitionProperties']:
                return TransitionProperties
        
            @staticmethod
            def rules() -> typing.Type['WorkflowRules']:
                return WorkflowRules
        
            @staticmethod
            def screen() -> typing.Type['TransitionScreenDetails']:
                return TransitionScreenDetails
            __annotations__ = {
                "description": description,
                "from": _from,
                "id": id,
                "name": name,
                "to": to,
                "type": type,
                "properties": properties,
                "rules": rules,
                "screen": screen,
            }
    
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    to: MetaOapg.properties.to
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> 'TransitionFrom': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> 'TransitionProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rules"]) -> 'WorkflowRules': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screen"]) -> 'TransitionScreenDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "from", "id", "name", "to", "type", "properties", "rules", "screen", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> 'TransitionFrom': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union['TransitionProperties', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rules"]) -> typing.Union['WorkflowRules', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screen"]) -> typing.Union['TransitionScreenDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "from", "id", "name", "to", "type", "properties", "rules", "screen", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        to: typing.Union[MetaOapg.properties.to, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        properties: typing.Union['TransitionProperties', schemas.Unset] = schemas.unset,
        rules: typing.Union['WorkflowRules', schemas.Unset] = schemas.unset,
        screen: typing.Union['TransitionScreenDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Transition':
        return super().__new__(
            cls,
            *args,
            name=name,
            description=description,
            id=id,
            to=to,
            type=type,
            properties=properties,
            rules=rules,
            screen=screen,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.transition_from import TransitionFrom
from atlassian_jira_python_sdk.model.transition_properties import TransitionProperties
from atlassian_jira_python_sdk.model.transition_screen_details import TransitionScreenDetails
from atlassian_jira_python_sdk.model.workflow_rules import WorkflowRules
