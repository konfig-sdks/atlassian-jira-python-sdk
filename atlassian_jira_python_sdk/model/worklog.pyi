# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class Worklog(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of a worklog.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def author() -> typing.Type['UserDetails']:
                return UserDetails
            comment = schemas.AnyTypeSchema
            created = schemas.DateTimeSchema
            id = schemas.StrSchema
            issueId = schemas.StrSchema
            
            
            class properties(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EntityProperty']:
                        return EntityProperty
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EntityProperty'], typing.List['EntityProperty']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'properties':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EntityProperty':
                    return super().__getitem__(i)
            _self = schemas.StrSchema
            started = schemas.DateTimeSchema
            timeSpent = schemas.StrSchema
            timeSpentSeconds = schemas.Int64Schema
        
            @staticmethod
            def updateAuthor() -> typing.Type['UserDetails']:
                return UserDetails
            updated = schemas.DateTimeSchema
        
            @staticmethod
            def visibility() -> typing.Type['Visibility']:
                return Visibility
            __annotations__ = {
                "author": author,
                "comment": comment,
                "created": created,
                "id": id,
                "issueId": issueId,
                "properties": properties,
                "self": _self,
                "started": started,
                "timeSpent": timeSpent,
                "timeSpentSeconds": timeSpentSeconds,
                "updateAuthor": updateAuthor,
                "updated": updated,
                "visibility": visibility,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author"]) -> 'UserDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueId"]) -> MetaOapg.properties.issueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["self"]) -> MetaOapg.properties._self: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["started"]) -> MetaOapg.properties.started: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeSpent"]) -> MetaOapg.properties.timeSpent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeSpentSeconds"]) -> MetaOapg.properties.timeSpentSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAuthor"]) -> 'UserDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibility"]) -> 'Visibility': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["author"], typing_extensions.Literal["comment"], typing_extensions.Literal["created"], typing_extensions.Literal["id"], typing_extensions.Literal["issueId"], typing_extensions.Literal["properties"], typing_extensions.Literal["self"], typing_extensions.Literal["started"], typing_extensions.Literal["timeSpent"], typing_extensions.Literal["timeSpentSeconds"], typing_extensions.Literal["updateAuthor"], typing_extensions.Literal["updated"], typing_extensions.Literal["visibility"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> typing.Union['UserDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueId"]) -> typing.Union[MetaOapg.properties.issueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union[MetaOapg.properties.properties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union[MetaOapg.properties._self, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["started"]) -> typing.Union[MetaOapg.properties.started, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeSpent"]) -> typing.Union[MetaOapg.properties.timeSpent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeSpentSeconds"]) -> typing.Union[MetaOapg.properties.timeSpentSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAuthor"]) -> typing.Union['UserDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibility"]) -> typing.Union['Visibility', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["author"], typing_extensions.Literal["comment"], typing_extensions.Literal["created"], typing_extensions.Literal["id"], typing_extensions.Literal["issueId"], typing_extensions.Literal["properties"], typing_extensions.Literal["self"], typing_extensions.Literal["started"], typing_extensions.Literal["timeSpent"], typing_extensions.Literal["timeSpentSeconds"], typing_extensions.Literal["updateAuthor"], typing_extensions.Literal["updated"], typing_extensions.Literal["visibility"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        author: typing.Union['UserDetails', schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        issueId: typing.Union[MetaOapg.properties.issueId, str, schemas.Unset] = schemas.unset,
        properties: typing.Union[MetaOapg.properties.properties, list, tuple, schemas.Unset] = schemas.unset,
        started: typing.Union[MetaOapg.properties.started, str, datetime, schemas.Unset] = schemas.unset,
        timeSpent: typing.Union[MetaOapg.properties.timeSpent, str, schemas.Unset] = schemas.unset,
        timeSpentSeconds: typing.Union[MetaOapg.properties.timeSpentSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updateAuthor: typing.Union['UserDetails', schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, str, datetime, schemas.Unset] = schemas.unset,
        visibility: typing.Union['Visibility', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Worklog':
        return super().__new__(
            cls,
            *args,
            author=author,
            comment=comment,
            created=created,
            id=id,
            issueId=issueId,
            properties=properties,
            started=started,
            timeSpent=timeSpent,
            timeSpentSeconds=timeSpentSeconds,
            updateAuthor=updateAuthor,
            updated=updated,
            visibility=visibility,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.entity_property import EntityProperty
from atlassian_jira_python_sdk.model.user_details import UserDetails
from atlassian_jira_python_sdk.model.visibility import Visibility
