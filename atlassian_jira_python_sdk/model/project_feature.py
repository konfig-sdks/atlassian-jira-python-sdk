# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class ProjectFeature(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of a project feature.
    """


    class MetaOapg:
        
        class properties:
            feature = schemas.StrSchema
            imageUri = schemas.StrSchema
            localisedDescription = schemas.StrSchema
            localisedName = schemas.StrSchema
        
            @staticmethod
            def prerequisites() -> typing.Type['ProjectFeaturePrerequisites']:
                return ProjectFeaturePrerequisites
            projectId = schemas.Int64Schema
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ENABLED": "ENABLED",
                        "DISABLED": "DISABLED",
                        "COMING_SOON": "COMING_SOON",
                    }
                
                @schemas.classproperty
                def ENABLED(cls):
                    return cls("ENABLED")
                
                @schemas.classproperty
                def DISABLED(cls):
                    return cls("DISABLED")
                
                @schemas.classproperty
                def COMING_SOON(cls):
                    return cls("COMING_SOON")
            toggleLocked = schemas.BoolSchema
            __annotations__ = {
                "feature": feature,
                "imageUri": imageUri,
                "localisedDescription": localisedDescription,
                "localisedName": localisedName,
                "prerequisites": prerequisites,
                "projectId": projectId,
                "state": state,
                "toggleLocked": toggleLocked,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feature"]) -> MetaOapg.properties.feature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imageUri"]) -> MetaOapg.properties.imageUri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localisedDescription"]) -> MetaOapg.properties.localisedDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localisedName"]) -> MetaOapg.properties.localisedName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prerequisites"]) -> 'ProjectFeaturePrerequisites': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toggleLocked"]) -> MetaOapg.properties.toggleLocked: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["feature", "imageUri", "localisedDescription", "localisedName", "prerequisites", "projectId", "state", "toggleLocked", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feature"]) -> typing.Union[MetaOapg.properties.feature, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imageUri"]) -> typing.Union[MetaOapg.properties.imageUri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localisedDescription"]) -> typing.Union[MetaOapg.properties.localisedDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localisedName"]) -> typing.Union[MetaOapg.properties.localisedName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prerequisites"]) -> typing.Union['ProjectFeaturePrerequisites', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toggleLocked"]) -> typing.Union[MetaOapg.properties.toggleLocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["feature", "imageUri", "localisedDescription", "localisedName", "prerequisites", "projectId", "state", "toggleLocked", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        feature: typing.Union[MetaOapg.properties.feature, str, schemas.Unset] = schemas.unset,
        imageUri: typing.Union[MetaOapg.properties.imageUri, str, schemas.Unset] = schemas.unset,
        localisedDescription: typing.Union[MetaOapg.properties.localisedDescription, str, schemas.Unset] = schemas.unset,
        localisedName: typing.Union[MetaOapg.properties.localisedName, str, schemas.Unset] = schemas.unset,
        prerequisites: typing.Union['ProjectFeaturePrerequisites', schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        toggleLocked: typing.Union[MetaOapg.properties.toggleLocked, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectFeature':
        return super().__new__(
            cls,
            *args,
            feature=feature,
            imageUri=imageUri,
            localisedDescription=localisedDescription,
            localisedName=localisedName,
            prerequisites=prerequisites,
            projectId=projectId,
            state=state,
            toggleLocked=toggleLocked,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.project_feature_prerequisites import ProjectFeaturePrerequisites
