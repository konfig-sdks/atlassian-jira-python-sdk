# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class WebhookDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A list of webhooks.
    """


    class MetaOapg:
        required = {
            "jqlFilter",
            "events",
        }
        
        class properties:
        
            @staticmethod
            def events() -> typing.Type['WebhookDetailsEvents']:
                return WebhookDetailsEvents
            jqlFilter = schemas.StrSchema
        
            @staticmethod
            def fieldIdsFilter() -> typing.Type['WebhookDetailsFieldIdsFilter']:
                return WebhookDetailsFieldIdsFilter
        
            @staticmethod
            def issuePropertyKeysFilter() -> typing.Type['WebhookDetailsIssuePropertyKeysFilter']:
                return WebhookDetailsIssuePropertyKeysFilter
            __annotations__ = {
                "events": events,
                "jqlFilter": jqlFilter,
                "fieldIdsFilter": fieldIdsFilter,
                "issuePropertyKeysFilter": issuePropertyKeysFilter,
            }
    
    jqlFilter: MetaOapg.properties.jqlFilter
    events: 'WebhookDetailsEvents'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> 'WebhookDetailsEvents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jqlFilter"]) -> MetaOapg.properties.jqlFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldIdsFilter"]) -> 'WebhookDetailsFieldIdsFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuePropertyKeysFilter"]) -> 'WebhookDetailsIssuePropertyKeysFilter': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["events", "jqlFilter", "fieldIdsFilter", "issuePropertyKeysFilter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> 'WebhookDetailsEvents': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jqlFilter"]) -> MetaOapg.properties.jqlFilter: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldIdsFilter"]) -> typing.Union['WebhookDetailsFieldIdsFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuePropertyKeysFilter"]) -> typing.Union['WebhookDetailsIssuePropertyKeysFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["events", "jqlFilter", "fieldIdsFilter", "issuePropertyKeysFilter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        jqlFilter: typing.Union[MetaOapg.properties.jqlFilter, str, ],
        events: 'WebhookDetailsEvents',
        fieldIdsFilter: typing.Union['WebhookDetailsFieldIdsFilter', schemas.Unset] = schemas.unset,
        issuePropertyKeysFilter: typing.Union['WebhookDetailsIssuePropertyKeysFilter', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebhookDetails':
        return super().__new__(
            cls,
            *args,
            jqlFilter=jqlFilter,
            events=events,
            fieldIdsFilter=fieldIdsFilter,
            issuePropertyKeysFilter=issuePropertyKeysFilter,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.webhook_details_events import WebhookDetailsEvents
from atlassian_jira_python_sdk.model.webhook_details_field_ids_filter import WebhookDetailsFieldIdsFilter
from atlassian_jira_python_sdk.model.webhook_details_issue_property_keys_filter import WebhookDetailsIssuePropertyKeysFilter
