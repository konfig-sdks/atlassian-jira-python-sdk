# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class VersionRelatedWork(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Associated related work to a version
    """


    class MetaOapg:
        required = {
            "category",
        }
        
        class properties:
            category = schemas.StrSchema
            title = schemas.StrSchema
            issueId = schemas.Int64Schema
            relatedWorkId = schemas.StrSchema
            url = schemas.StrSchema
            __annotations__ = {
                "category": category,
                "title": title,
                "issueId": issueId,
                "relatedWorkId": relatedWorkId,
                "url": url,
            }
    
    category: MetaOapg.properties.category
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueId"]) -> MetaOapg.properties.issueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedWorkId"]) -> MetaOapg.properties.relatedWorkId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["category", "title", "issueId", "relatedWorkId", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueId"]) -> typing.Union[MetaOapg.properties.issueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedWorkId"]) -> typing.Union[MetaOapg.properties.relatedWorkId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["category", "title", "issueId", "relatedWorkId", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        category: typing.Union[MetaOapg.properties.category, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        issueId: typing.Union[MetaOapg.properties.issueId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        relatedWorkId: typing.Union[MetaOapg.properties.relatedWorkId, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VersionRelatedWork':
        return super().__new__(
            cls,
            *args,
            category=category,
            title=title,
            issueId=issueId,
            relatedWorkId=relatedWorkId,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )
