# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class HistoryMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of issue history metadata.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            activityDescription = schemas.StrSchema
            activityDescriptionKey = schemas.StrSchema
        
            @staticmethod
            def actor() -> typing.Type['HistoryMetadataParticipant']:
                return HistoryMetadataParticipant
        
            @staticmethod
            def cause() -> typing.Type['HistoryMetadataParticipant']:
                return HistoryMetadataParticipant
            descriptionKey = schemas.StrSchema
            emailDescription = schemas.StrSchema
            emailDescriptionKey = schemas.StrSchema
        
            @staticmethod
            def extraData() -> typing.Type['HistoryMetadataExtraData']:
                return HistoryMetadataExtraData
        
            @staticmethod
            def generator() -> typing.Type['HistoryMetadataParticipant']:
                return HistoryMetadataParticipant
            type = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "activityDescription": activityDescription,
                "activityDescriptionKey": activityDescriptionKey,
                "actor": actor,
                "cause": cause,
                "descriptionKey": descriptionKey,
                "emailDescription": emailDescription,
                "emailDescriptionKey": emailDescriptionKey,
                "extraData": extraData,
                "generator": generator,
                "type": type,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activityDescription"]) -> MetaOapg.properties.activityDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activityDescriptionKey"]) -> MetaOapg.properties.activityDescriptionKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actor"]) -> 'HistoryMetadataParticipant': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cause"]) -> 'HistoryMetadataParticipant': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["descriptionKey"]) -> MetaOapg.properties.descriptionKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailDescription"]) -> MetaOapg.properties.emailDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailDescriptionKey"]) -> MetaOapg.properties.emailDescriptionKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extraData"]) -> 'HistoryMetadataExtraData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generator"]) -> 'HistoryMetadataParticipant': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description"], typing_extensions.Literal["activityDescription"], typing_extensions.Literal["activityDescriptionKey"], typing_extensions.Literal["actor"], typing_extensions.Literal["cause"], typing_extensions.Literal["descriptionKey"], typing_extensions.Literal["emailDescription"], typing_extensions.Literal["emailDescriptionKey"], typing_extensions.Literal["extraData"], typing_extensions.Literal["generator"], typing_extensions.Literal["type"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activityDescription"]) -> typing.Union[MetaOapg.properties.activityDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activityDescriptionKey"]) -> typing.Union[MetaOapg.properties.activityDescriptionKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actor"]) -> typing.Union['HistoryMetadataParticipant', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cause"]) -> typing.Union['HistoryMetadataParticipant', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["descriptionKey"]) -> typing.Union[MetaOapg.properties.descriptionKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailDescription"]) -> typing.Union[MetaOapg.properties.emailDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailDescriptionKey"]) -> typing.Union[MetaOapg.properties.emailDescriptionKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extraData"]) -> typing.Union['HistoryMetadataExtraData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generator"]) -> typing.Union['HistoryMetadataParticipant', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description"], typing_extensions.Literal["activityDescription"], typing_extensions.Literal["activityDescriptionKey"], typing_extensions.Literal["actor"], typing_extensions.Literal["cause"], typing_extensions.Literal["descriptionKey"], typing_extensions.Literal["emailDescription"], typing_extensions.Literal["emailDescriptionKey"], typing_extensions.Literal["extraData"], typing_extensions.Literal["generator"], typing_extensions.Literal["type"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        activityDescription: typing.Union[MetaOapg.properties.activityDescription, str, schemas.Unset] = schemas.unset,
        activityDescriptionKey: typing.Union[MetaOapg.properties.activityDescriptionKey, str, schemas.Unset] = schemas.unset,
        actor: typing.Union['HistoryMetadataParticipant', schemas.Unset] = schemas.unset,
        cause: typing.Union['HistoryMetadataParticipant', schemas.Unset] = schemas.unset,
        descriptionKey: typing.Union[MetaOapg.properties.descriptionKey, str, schemas.Unset] = schemas.unset,
        emailDescription: typing.Union[MetaOapg.properties.emailDescription, str, schemas.Unset] = schemas.unset,
        emailDescriptionKey: typing.Union[MetaOapg.properties.emailDescriptionKey, str, schemas.Unset] = schemas.unset,
        extraData: typing.Union['HistoryMetadataExtraData', schemas.Unset] = schemas.unset,
        generator: typing.Union['HistoryMetadataParticipant', schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'HistoryMetadata':
        return super().__new__(
            cls,
            *args,
            description=description,
            activityDescription=activityDescription,
            activityDescriptionKey=activityDescriptionKey,
            actor=actor,
            cause=cause,
            descriptionKey=descriptionKey,
            emailDescription=emailDescription,
            emailDescriptionKey=emailDescriptionKey,
            extraData=extraData,
            generator=generator,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.history_metadata_extra_data import HistoryMetadataExtraData
from atlassian_jira_python_sdk.model.history_metadata_participant import HistoryMetadataParticipant
