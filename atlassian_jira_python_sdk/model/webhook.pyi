# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class Webhook(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A webhook.
    """


    class MetaOapg:
        required = {
            "jqlFilter",
            "id",
            "events",
        }
        
        class properties:
        
            @staticmethod
            def events() -> typing.Type['WebhookEvents']:
                return WebhookEvents
            id = schemas.Int64Schema
            jqlFilter = schemas.StrSchema
            expirationDate = schemas.Int64Schema
        
            @staticmethod
            def fieldIdsFilter() -> typing.Type['WebhookFieldIdsFilter']:
                return WebhookFieldIdsFilter
        
            @staticmethod
            def issuePropertyKeysFilter() -> typing.Type['WebhookIssuePropertyKeysFilter']:
                return WebhookIssuePropertyKeysFilter
            __annotations__ = {
                "events": events,
                "id": id,
                "jqlFilter": jqlFilter,
                "expirationDate": expirationDate,
                "fieldIdsFilter": fieldIdsFilter,
                "issuePropertyKeysFilter": issuePropertyKeysFilter,
            }
    
    jqlFilter: MetaOapg.properties.jqlFilter
    id: MetaOapg.properties.id
    events: 'WebhookEvents'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> 'WebhookEvents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jqlFilter"]) -> MetaOapg.properties.jqlFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldIdsFilter"]) -> 'WebhookFieldIdsFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuePropertyKeysFilter"]) -> 'WebhookIssuePropertyKeysFilter': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["events", "id", "jqlFilter", "expirationDate", "fieldIdsFilter", "issuePropertyKeysFilter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> 'WebhookEvents': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jqlFilter"]) -> MetaOapg.properties.jqlFilter: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldIdsFilter"]) -> typing.Union['WebhookFieldIdsFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuePropertyKeysFilter"]) -> typing.Union['WebhookIssuePropertyKeysFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["events", "id", "jqlFilter", "expirationDate", "fieldIdsFilter", "issuePropertyKeysFilter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        jqlFilter: typing.Union[MetaOapg.properties.jqlFilter, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        events: 'WebhookEvents',
        expirationDate: typing.Union[MetaOapg.properties.expirationDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        fieldIdsFilter: typing.Union['WebhookFieldIdsFilter', schemas.Unset] = schemas.unset,
        issuePropertyKeysFilter: typing.Union['WebhookIssuePropertyKeysFilter', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Webhook':
        return super().__new__(
            cls,
            *args,
            jqlFilter=jqlFilter,
            id=id,
            events=events,
            expirationDate=expirationDate,
            fieldIdsFilter=fieldIdsFilter,
            issuePropertyKeysFilter=issuePropertyKeysFilter,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.webhook_events import WebhookEvents
from atlassian_jira_python_sdk.model.webhook_field_ids_filter import WebhookFieldIdsFilter
from atlassian_jira_python_sdk.model.webhook_issue_property_keys_filter import WebhookIssuePropertyKeysFilter
