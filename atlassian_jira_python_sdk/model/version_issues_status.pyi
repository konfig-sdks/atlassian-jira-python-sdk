# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class VersionIssuesStatus(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Counts of the number of issues in various statuses.
    """


    class MetaOapg:
        
        class properties:
            done = schemas.Int64Schema
            inProgress = schemas.Int64Schema
            toDo = schemas.Int64Schema
            unmapped = schemas.Int64Schema
            __annotations__ = {
                "done": done,
                "inProgress": inProgress,
                "toDo": toDo,
                "unmapped": unmapped,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["done"]) -> MetaOapg.properties.done: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inProgress"]) -> MetaOapg.properties.inProgress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toDo"]) -> MetaOapg.properties.toDo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unmapped"]) -> MetaOapg.properties.unmapped: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["done"], typing_extensions.Literal["inProgress"], typing_extensions.Literal["toDo"], typing_extensions.Literal["unmapped"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["done"]) -> typing.Union[MetaOapg.properties.done, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inProgress"]) -> typing.Union[MetaOapg.properties.inProgress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toDo"]) -> typing.Union[MetaOapg.properties.toDo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unmapped"]) -> typing.Union[MetaOapg.properties.unmapped, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["done"], typing_extensions.Literal["inProgress"], typing_extensions.Literal["toDo"], typing_extensions.Literal["unmapped"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        done: typing.Union[MetaOapg.properties.done, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        inProgress: typing.Union[MetaOapg.properties.inProgress, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        toDo: typing.Union[MetaOapg.properties.toDo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        unmapped: typing.Union[MetaOapg.properties.unmapped, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'VersionIssuesStatus':
        return super().__new__(
            cls,
            *args,
            done=done,
            inProgress=inProgress,
            toDo=toDo,
            unmapped=unmapped,
            _configuration=_configuration,
            **kwargs,
        )
