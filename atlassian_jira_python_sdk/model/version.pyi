# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class Version(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about a project version.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            
            
            class approvers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VersionApprover']:
                        return VersionApprover
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['VersionApprover'], typing.List['VersionApprover']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approvers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VersionApprover':
                    return super().__getitem__(i)
            archived = schemas.BoolSchema
            driver = schemas.StrSchema
            expand = schemas.StrSchema
            id = schemas.StrSchema
        
            @staticmethod
            def issuesStatusForFixVersion() -> typing.Type['VersionIssuesStatus']:
                return VersionIssuesStatus
            moveUnfixedIssuesTo = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class operations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SimpleLink']:
                        return SimpleLink
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SimpleLink'], typing.List['SimpleLink']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'operations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SimpleLink':
                    return super().__getitem__(i)
            overdue = schemas.BoolSchema
            project = schemas.StrSchema
            projectId = schemas.Int64Schema
            releaseDate = schemas.DateSchema
            released = schemas.BoolSchema
            _self = schemas.StrSchema
            startDate = schemas.DateSchema
            userReleaseDate = schemas.StrSchema
            userStartDate = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "approvers": approvers,
                "archived": archived,
                "driver": driver,
                "expand": expand,
                "id": id,
                "issuesStatusForFixVersion": issuesStatusForFixVersion,
                "moveUnfixedIssuesTo": moveUnfixedIssuesTo,
                "name": name,
                "operations": operations,
                "overdue": overdue,
                "project": project,
                "projectId": projectId,
                "releaseDate": releaseDate,
                "released": released,
                "self": _self,
                "startDate": startDate,
                "userReleaseDate": userReleaseDate,
                "userStartDate": userStartDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvers"]) -> MetaOapg.properties.approvers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["driver"]) -> MetaOapg.properties.driver: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expand"]) -> MetaOapg.properties.expand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuesStatusForFixVersion"]) -> 'VersionIssuesStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["moveUnfixedIssuesTo"]) -> MetaOapg.properties.moveUnfixedIssuesTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operations"]) -> MetaOapg.properties.operations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overdue"]) -> MetaOapg.properties.overdue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseDate"]) -> MetaOapg.properties.releaseDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["released"]) -> MetaOapg.properties.released: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["self"]) -> MetaOapg.properties._self: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userReleaseDate"]) -> MetaOapg.properties.userReleaseDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userStartDate"]) -> MetaOapg.properties.userStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "approvers", "archived", "driver", "expand", "id", "issuesStatusForFixVersion", "moveUnfixedIssuesTo", "name", "operations", "overdue", "project", "projectId", "releaseDate", "released", "self", "startDate", "userReleaseDate", "userStartDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvers"]) -> typing.Union[MetaOapg.properties.approvers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["driver"]) -> typing.Union[MetaOapg.properties.driver, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expand"]) -> typing.Union[MetaOapg.properties.expand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuesStatusForFixVersion"]) -> typing.Union['VersionIssuesStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["moveUnfixedIssuesTo"]) -> typing.Union[MetaOapg.properties.moveUnfixedIssuesTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operations"]) -> typing.Union[MetaOapg.properties.operations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overdue"]) -> typing.Union[MetaOapg.properties.overdue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union[MetaOapg.properties.project, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseDate"]) -> typing.Union[MetaOapg.properties.releaseDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["released"]) -> typing.Union[MetaOapg.properties.released, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union[MetaOapg.properties._self, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userReleaseDate"]) -> typing.Union[MetaOapg.properties.userReleaseDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userStartDate"]) -> typing.Union[MetaOapg.properties.userStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "approvers", "archived", "driver", "expand", "id", "issuesStatusForFixVersion", "moveUnfixedIssuesTo", "name", "operations", "overdue", "project", "projectId", "releaseDate", "released", "self", "startDate", "userReleaseDate", "userStartDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        approvers: typing.Union[MetaOapg.properties.approvers, list, tuple, schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        driver: typing.Union[MetaOapg.properties.driver, str, schemas.Unset] = schemas.unset,
        expand: typing.Union[MetaOapg.properties.expand, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        issuesStatusForFixVersion: typing.Union['VersionIssuesStatus', schemas.Unset] = schemas.unset,
        moveUnfixedIssuesTo: typing.Union[MetaOapg.properties.moveUnfixedIssuesTo, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        operations: typing.Union[MetaOapg.properties.operations, list, tuple, schemas.Unset] = schemas.unset,
        overdue: typing.Union[MetaOapg.properties.overdue, bool, schemas.Unset] = schemas.unset,
        project: typing.Union[MetaOapg.properties.project, str, schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        releaseDate: typing.Union[MetaOapg.properties.releaseDate, str, date, schemas.Unset] = schemas.unset,
        released: typing.Union[MetaOapg.properties.released, bool, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        userReleaseDate: typing.Union[MetaOapg.properties.userReleaseDate, str, schemas.Unset] = schemas.unset,
        userStartDate: typing.Union[MetaOapg.properties.userStartDate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Version':
        return super().__new__(
            cls,
            *args,
            description=description,
            approvers=approvers,
            archived=archived,
            driver=driver,
            expand=expand,
            id=id,
            issuesStatusForFixVersion=issuesStatusForFixVersion,
            moveUnfixedIssuesTo=moveUnfixedIssuesTo,
            name=name,
            operations=operations,
            overdue=overdue,
            project=project,
            projectId=projectId,
            releaseDate=releaseDate,
            released=released,
            startDate=startDate,
            userReleaseDate=userReleaseDate,
            userStartDate=userStartDate,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.simple_link import SimpleLink
from atlassian_jira_python_sdk.model.version_approver import VersionApprover
from atlassian_jira_python_sdk.model.version_issues_status import VersionIssuesStatus
