# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class WorkflowSchemeReadResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "workflowsForIssueTypes",
            "scope",
            "name",
            "projectIdsUsingScheme",
            "id",
            "version",
        }
        
        class properties:
        
            @staticmethod
            def version() -> typing.Type['DocumentVersion']:
                return DocumentVersion
            id = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def projectIdsUsingScheme() -> typing.Type['WorkflowSchemeReadResponseProjectIdsUsingScheme']:
                return WorkflowSchemeReadResponseProjectIdsUsingScheme
        
            @staticmethod
            def scope() -> typing.Type['WorkflowScope']:
                return WorkflowScope
            
            
            class workflowsForIssueTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowMetadataAndIssueTypeRestModel']:
                        return WorkflowMetadataAndIssueTypeRestModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowMetadataAndIssueTypeRestModel'], typing.List['WorkflowMetadataAndIssueTypeRestModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowsForIssueTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowMetadataAndIssueTypeRestModel':
                    return super().__getitem__(i)
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def defaultWorkflow() -> typing.Type['WorkflowMetadataRestModel']:
                return WorkflowMetadataRestModel
            
            
            class taskId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'taskId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "version": version,
                "id": id,
                "name": name,
                "projectIdsUsingScheme": projectIdsUsingScheme,
                "scope": scope,
                "workflowsForIssueTypes": workflowsForIssueTypes,
                "description": description,
                "defaultWorkflow": defaultWorkflow,
                "taskId": taskId,
            }
    
    workflowsForIssueTypes: MetaOapg.properties.workflowsForIssueTypes
    scope: 'WorkflowScope'
    name: MetaOapg.properties.name
    projectIdsUsingScheme: 'WorkflowSchemeReadResponseProjectIdsUsingScheme'
    id: MetaOapg.properties.id
    version: 'DocumentVersion'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> 'DocumentVersion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectIdsUsingScheme"]) -> 'WorkflowSchemeReadResponseProjectIdsUsingScheme': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> 'WorkflowScope': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowsForIssueTypes"]) -> MetaOapg.properties.workflowsForIssueTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultWorkflow"]) -> 'WorkflowMetadataRestModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taskId"]) -> MetaOapg.properties.taskId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "id", "name", "projectIdsUsingScheme", "scope", "workflowsForIssueTypes", "description", "defaultWorkflow", "taskId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> 'DocumentVersion': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectIdsUsingScheme"]) -> 'WorkflowSchemeReadResponseProjectIdsUsingScheme': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> 'WorkflowScope': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowsForIssueTypes"]) -> MetaOapg.properties.workflowsForIssueTypes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultWorkflow"]) -> typing.Union['WorkflowMetadataRestModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taskId"]) -> typing.Union[MetaOapg.properties.taskId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "id", "name", "projectIdsUsingScheme", "scope", "workflowsForIssueTypes", "description", "defaultWorkflow", "taskId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        workflowsForIssueTypes: typing.Union[MetaOapg.properties.workflowsForIssueTypes, list, tuple, ],
        scope: 'WorkflowScope',
        name: typing.Union[MetaOapg.properties.name, str, ],
        projectIdsUsingScheme: 'WorkflowSchemeReadResponseProjectIdsUsingScheme',
        id: typing.Union[MetaOapg.properties.id, str, ],
        version: 'DocumentVersion',
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        defaultWorkflow: typing.Union['WorkflowMetadataRestModel', schemas.Unset] = schemas.unset,
        taskId: typing.Union[MetaOapg.properties.taskId, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowSchemeReadResponse':
        return super().__new__(
            cls,
            *args,
            workflowsForIssueTypes=workflowsForIssueTypes,
            scope=scope,
            name=name,
            projectIdsUsingScheme=projectIdsUsingScheme,
            id=id,
            version=version,
            description=description,
            defaultWorkflow=defaultWorkflow,
            taskId=taskId,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.document_version import DocumentVersion
from atlassian_jira_python_sdk.model.workflow_metadata_and_issue_type_rest_model import WorkflowMetadataAndIssueTypeRestModel
from atlassian_jira_python_sdk.model.workflow_metadata_rest_model import WorkflowMetadataRestModel
from atlassian_jira_python_sdk.model.workflow_scheme_read_response_project_ids_using_scheme import WorkflowSchemeReadResponseProjectIdsUsingScheme
from atlassian_jira_python_sdk.model.workflow_scope import WorkflowScope
