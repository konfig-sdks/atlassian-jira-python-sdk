# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class Field(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of a field.
    """


    class MetaOapg:
        required = {
            "schema",
            "name",
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def schema() -> typing.Type['JsonTypeBean']:
                return JsonTypeBean
            description = schemas.StrSchema
            contextsCount = schemas.Int64Schema
            isLocked = schemas.BoolSchema
            isUnscreenable = schemas.BoolSchema
            key = schemas.StrSchema
        
            @staticmethod
            def lastUsed() -> typing.Type['FieldLastUsed']:
                return FieldLastUsed
            projectsCount = schemas.Int64Schema
            screensCount = schemas.Int64Schema
            searcherKey = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "schema": schema,
                "description": description,
                "contextsCount": contextsCount,
                "isLocked": isLocked,
                "isUnscreenable": isUnscreenable,
                "key": key,
                "lastUsed": lastUsed,
                "projectsCount": projectsCount,
                "screensCount": screensCount,
                "searcherKey": searcherKey,
            }
    
    schema: 'JsonTypeBean'
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schema"]) -> 'JsonTypeBean': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextsCount"]) -> MetaOapg.properties.contextsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isLocked"]) -> MetaOapg.properties.isLocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isUnscreenable"]) -> MetaOapg.properties.isUnscreenable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUsed"]) -> 'FieldLastUsed': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectsCount"]) -> MetaOapg.properties.projectsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screensCount"]) -> MetaOapg.properties.screensCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["searcherKey"]) -> MetaOapg.properties.searcherKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "schema", "description", "contextsCount", "isLocked", "isUnscreenable", "key", "lastUsed", "projectsCount", "screensCount", "searcherKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schema"]) -> 'JsonTypeBean': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextsCount"]) -> typing.Union[MetaOapg.properties.contextsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isLocked"]) -> typing.Union[MetaOapg.properties.isLocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isUnscreenable"]) -> typing.Union[MetaOapg.properties.isUnscreenable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUsed"]) -> typing.Union['FieldLastUsed', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectsCount"]) -> typing.Union[MetaOapg.properties.projectsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screensCount"]) -> typing.Union[MetaOapg.properties.screensCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["searcherKey"]) -> typing.Union[MetaOapg.properties.searcherKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "schema", "description", "contextsCount", "isLocked", "isUnscreenable", "key", "lastUsed", "projectsCount", "screensCount", "searcherKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        schema: 'JsonTypeBean',
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        contextsCount: typing.Union[MetaOapg.properties.contextsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isLocked: typing.Union[MetaOapg.properties.isLocked, bool, schemas.Unset] = schemas.unset,
        isUnscreenable: typing.Union[MetaOapg.properties.isUnscreenable, bool, schemas.Unset] = schemas.unset,
        key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
        lastUsed: typing.Union['FieldLastUsed', schemas.Unset] = schemas.unset,
        projectsCount: typing.Union[MetaOapg.properties.projectsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        screensCount: typing.Union[MetaOapg.properties.screensCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        searcherKey: typing.Union[MetaOapg.properties.searcherKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Field':
        return super().__new__(
            cls,
            *args,
            schema=schema,
            name=name,
            id=id,
            description=description,
            contextsCount=contextsCount,
            isLocked=isLocked,
            isUnscreenable=isUnscreenable,
            key=key,
            lastUsed=lastUsed,
            projectsCount=projectsCount,
            screensCount=screensCount,
            searcherKey=searcherKey,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.field_last_used import FieldLastUsed
from atlassian_jira_python_sdk.model.json_type_bean import JsonTypeBean
