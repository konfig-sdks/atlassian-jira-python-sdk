# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class FilterDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of a filter.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            description = schemas.StrSchema
            approximateLastUsed = schemas.DateTimeSchema
            
            
            class editPermissions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SharePermission']:
                        return SharePermission
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SharePermission'], typing.List['SharePermission']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'editPermissions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SharePermission':
                    return super().__getitem__(i)
            expand = schemas.StrSchema
            favourite = schemas.BoolSchema
            favouritedCount = schemas.Int64Schema
            id = schemas.StrSchema
            jql = schemas.StrSchema
        
            @staticmethod
            def owner() -> typing.Type['User']:
                return User
            searchUrl = schemas.StrSchema
            _self = schemas.StrSchema
            
            
            class sharePermissions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SharePermission']:
                        return SharePermission
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SharePermission'], typing.List['SharePermission']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sharePermissions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SharePermission':
                    return super().__getitem__(i)
            
            
            class subscriptions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FilterSubscription']:
                        return FilterSubscription
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['FilterSubscription'], typing.List['FilterSubscription']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subscriptions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FilterSubscription':
                    return super().__getitem__(i)
            viewUrl = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "description": description,
                "approximateLastUsed": approximateLastUsed,
                "editPermissions": editPermissions,
                "expand": expand,
                "favourite": favourite,
                "favouritedCount": favouritedCount,
                "id": id,
                "jql": jql,
                "owner": owner,
                "searchUrl": searchUrl,
                "self": _self,
                "sharePermissions": sharePermissions,
                "subscriptions": subscriptions,
                "viewUrl": viewUrl,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approximateLastUsed"]) -> MetaOapg.properties.approximateLastUsed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editPermissions"]) -> MetaOapg.properties.editPermissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expand"]) -> MetaOapg.properties.expand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["favourite"]) -> MetaOapg.properties.favourite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["favouritedCount"]) -> MetaOapg.properties.favouritedCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jql"]) -> MetaOapg.properties.jql: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["searchUrl"]) -> MetaOapg.properties.searchUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["self"]) -> MetaOapg.properties._self: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharePermissions"]) -> MetaOapg.properties.sharePermissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriptions"]) -> MetaOapg.properties.subscriptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewUrl"]) -> MetaOapg.properties.viewUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "description", "approximateLastUsed", "editPermissions", "expand", "favourite", "favouritedCount", "id", "jql", "owner", "searchUrl", "self", "sharePermissions", "subscriptions", "viewUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approximateLastUsed"]) -> typing.Union[MetaOapg.properties.approximateLastUsed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editPermissions"]) -> typing.Union[MetaOapg.properties.editPermissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expand"]) -> typing.Union[MetaOapg.properties.expand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["favourite"]) -> typing.Union[MetaOapg.properties.favourite, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["favouritedCount"]) -> typing.Union[MetaOapg.properties.favouritedCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jql"]) -> typing.Union[MetaOapg.properties.jql, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["searchUrl"]) -> typing.Union[MetaOapg.properties.searchUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union[MetaOapg.properties._self, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharePermissions"]) -> typing.Union[MetaOapg.properties.sharePermissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriptions"]) -> typing.Union[MetaOapg.properties.subscriptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewUrl"]) -> typing.Union[MetaOapg.properties.viewUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "description", "approximateLastUsed", "editPermissions", "expand", "favourite", "favouritedCount", "id", "jql", "owner", "searchUrl", "self", "sharePermissions", "subscriptions", "viewUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        approximateLastUsed: typing.Union[MetaOapg.properties.approximateLastUsed, str, datetime, schemas.Unset] = schemas.unset,
        editPermissions: typing.Union[MetaOapg.properties.editPermissions, list, tuple, schemas.Unset] = schemas.unset,
        expand: typing.Union[MetaOapg.properties.expand, str, schemas.Unset] = schemas.unset,
        favourite: typing.Union[MetaOapg.properties.favourite, bool, schemas.Unset] = schemas.unset,
        favouritedCount: typing.Union[MetaOapg.properties.favouritedCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        jql: typing.Union[MetaOapg.properties.jql, str, schemas.Unset] = schemas.unset,
        owner: typing.Union['User', schemas.Unset] = schemas.unset,
        searchUrl: typing.Union[MetaOapg.properties.searchUrl, str, schemas.Unset] = schemas.unset,
        sharePermissions: typing.Union[MetaOapg.properties.sharePermissions, list, tuple, schemas.Unset] = schemas.unset,
        subscriptions: typing.Union[MetaOapg.properties.subscriptions, list, tuple, schemas.Unset] = schemas.unset,
        viewUrl: typing.Union[MetaOapg.properties.viewUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FilterDetails':
        return super().__new__(
            cls,
            *args,
            name=name,
            description=description,
            approximateLastUsed=approximateLastUsed,
            editPermissions=editPermissions,
            expand=expand,
            favourite=favourite,
            favouritedCount=favouritedCount,
            id=id,
            jql=jql,
            owner=owner,
            searchUrl=searchUrl,
            sharePermissions=sharePermissions,
            subscriptions=subscriptions,
            viewUrl=viewUrl,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.filter_subscription import FilterSubscription
from atlassian_jira_python_sdk.model.share_permission import SharePermission
from atlassian_jira_python_sdk.model.user import User
