# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class TimeTrackingConfiguration(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of the time tracking configuration.
    """


    class MetaOapg:
        required = {
            "defaultUnit",
            "workingHoursPerDay",
            "timeFormat",
            "workingDaysPerWeek",
        }
        
        class properties:
            
            
            class defaultUnit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MINUTE(cls):
                    return cls("minute")
                
                @schemas.classproperty
                def HOUR(cls):
                    return cls("hour")
                
                @schemas.classproperty
                def DAY(cls):
                    return cls("day")
                
                @schemas.classproperty
                def WEEK(cls):
                    return cls("week")
            
            
            class timeFormat(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PRETTY(cls):
                    return cls("pretty")
                
                @schemas.classproperty
                def DAYS(cls):
                    return cls("days")
                
                @schemas.classproperty
                def HOURS(cls):
                    return cls("hours")
            workingDaysPerWeek = schemas.Float64Schema
            workingHoursPerDay = schemas.Float64Schema
            __annotations__ = {
                "defaultUnit": defaultUnit,
                "timeFormat": timeFormat,
                "workingDaysPerWeek": workingDaysPerWeek,
                "workingHoursPerDay": workingHoursPerDay,
            }
    
    defaultUnit: MetaOapg.properties.defaultUnit
    workingHoursPerDay: MetaOapg.properties.workingHoursPerDay
    timeFormat: MetaOapg.properties.timeFormat
    workingDaysPerWeek: MetaOapg.properties.workingDaysPerWeek
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultUnit"]) -> MetaOapg.properties.defaultUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeFormat"]) -> MetaOapg.properties.timeFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workingDaysPerWeek"]) -> MetaOapg.properties.workingDaysPerWeek: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workingHoursPerDay"]) -> MetaOapg.properties.workingHoursPerDay: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["defaultUnit", "timeFormat", "workingDaysPerWeek", "workingHoursPerDay", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultUnit"]) -> MetaOapg.properties.defaultUnit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeFormat"]) -> MetaOapg.properties.timeFormat: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workingDaysPerWeek"]) -> MetaOapg.properties.workingDaysPerWeek: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workingHoursPerDay"]) -> MetaOapg.properties.workingHoursPerDay: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["defaultUnit", "timeFormat", "workingDaysPerWeek", "workingHoursPerDay", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        defaultUnit: typing.Union[MetaOapg.properties.defaultUnit, str, ],
        workingHoursPerDay: typing.Union[MetaOapg.properties.workingHoursPerDay, decimal.Decimal, int, float, ],
        timeFormat: typing.Union[MetaOapg.properties.timeFormat, str, ],
        workingDaysPerWeek: typing.Union[MetaOapg.properties.workingDaysPerWeek, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeTrackingConfiguration':
        return super().__new__(
            cls,
            *args,
            defaultUnit=defaultUnit,
            workingHoursPerDay=workingHoursPerDay,
            timeFormat=timeFormat,
            workingDaysPerWeek=workingDaysPerWeek,
            _configuration=_configuration,
            **kwargs,
        )
