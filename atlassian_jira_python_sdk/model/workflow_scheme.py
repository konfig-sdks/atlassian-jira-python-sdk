# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class WorkflowScheme(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about a workflow scheme.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            defaultWorkflow = schemas.StrSchema
            draft = schemas.BoolSchema
            id = schemas.Int64Schema
        
            @staticmethod
            def issueTypeMappings() -> typing.Type['WorkflowSchemeIssueTypeMappings']:
                return WorkflowSchemeIssueTypeMappings
        
            @staticmethod
            def issueTypes() -> typing.Type['WorkflowSchemeIssueTypes']:
                return WorkflowSchemeIssueTypes
            lastModified = schemas.StrSchema
        
            @staticmethod
            def lastModifiedUser() -> typing.Type['User']:
                return User
            name = schemas.StrSchema
            originalDefaultWorkflow = schemas.StrSchema
        
            @staticmethod
            def originalIssueTypeMappings() -> typing.Type['WorkflowSchemeOriginalIssueTypeMappings']:
                return WorkflowSchemeOriginalIssueTypeMappings
            _self = schemas.StrSchema
            updateDraftIfNeeded = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "defaultWorkflow": defaultWorkflow,
                "draft": draft,
                "id": id,
                "issueTypeMappings": issueTypeMappings,
                "issueTypes": issueTypes,
                "lastModified": lastModified,
                "lastModifiedUser": lastModifiedUser,
                "name": name,
                "originalDefaultWorkflow": originalDefaultWorkflow,
                "originalIssueTypeMappings": originalIssueTypeMappings,
                "self": _self,
                "updateDraftIfNeeded": updateDraftIfNeeded,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultWorkflow"]) -> MetaOapg.properties.defaultWorkflow: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draft"]) -> MetaOapg.properties.draft: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueTypeMappings"]) -> 'WorkflowSchemeIssueTypeMappings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueTypes"]) -> 'WorkflowSchemeIssueTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModifiedUser"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalDefaultWorkflow"]) -> MetaOapg.properties.originalDefaultWorkflow: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalIssueTypeMappings"]) -> 'WorkflowSchemeOriginalIssueTypeMappings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["self"]) -> MetaOapg.properties._self: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateDraftIfNeeded"]) -> MetaOapg.properties.updateDraftIfNeeded: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "defaultWorkflow", "draft", "id", "issueTypeMappings", "issueTypes", "lastModified", "lastModifiedUser", "name", "originalDefaultWorkflow", "originalIssueTypeMappings", "self", "updateDraftIfNeeded", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultWorkflow"]) -> typing.Union[MetaOapg.properties.defaultWorkflow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draft"]) -> typing.Union[MetaOapg.properties.draft, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueTypeMappings"]) -> typing.Union['WorkflowSchemeIssueTypeMappings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueTypes"]) -> typing.Union['WorkflowSchemeIssueTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModified"]) -> typing.Union[MetaOapg.properties.lastModified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModifiedUser"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalDefaultWorkflow"]) -> typing.Union[MetaOapg.properties.originalDefaultWorkflow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalIssueTypeMappings"]) -> typing.Union['WorkflowSchemeOriginalIssueTypeMappings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union[MetaOapg.properties._self, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateDraftIfNeeded"]) -> typing.Union[MetaOapg.properties.updateDraftIfNeeded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "defaultWorkflow", "draft", "id", "issueTypeMappings", "issueTypes", "lastModified", "lastModifiedUser", "name", "originalDefaultWorkflow", "originalIssueTypeMappings", "self", "updateDraftIfNeeded", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        defaultWorkflow: typing.Union[MetaOapg.properties.defaultWorkflow, str, schemas.Unset] = schemas.unset,
        draft: typing.Union[MetaOapg.properties.draft, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        issueTypeMappings: typing.Union['WorkflowSchemeIssueTypeMappings', schemas.Unset] = schemas.unset,
        issueTypes: typing.Union['WorkflowSchemeIssueTypes', schemas.Unset] = schemas.unset,
        lastModified: typing.Union[MetaOapg.properties.lastModified, str, schemas.Unset] = schemas.unset,
        lastModifiedUser: typing.Union['User', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        originalDefaultWorkflow: typing.Union[MetaOapg.properties.originalDefaultWorkflow, str, schemas.Unset] = schemas.unset,
        originalIssueTypeMappings: typing.Union['WorkflowSchemeOriginalIssueTypeMappings', schemas.Unset] = schemas.unset,
        updateDraftIfNeeded: typing.Union[MetaOapg.properties.updateDraftIfNeeded, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowScheme':
        return super().__new__(
            cls,
            *args,
            description=description,
            defaultWorkflow=defaultWorkflow,
            draft=draft,
            id=id,
            issueTypeMappings=issueTypeMappings,
            issueTypes=issueTypes,
            lastModified=lastModified,
            lastModifiedUser=lastModifiedUser,
            name=name,
            originalDefaultWorkflow=originalDefaultWorkflow,
            originalIssueTypeMappings=originalIssueTypeMappings,
            updateDraftIfNeeded=updateDraftIfNeeded,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.user import User
from atlassian_jira_python_sdk.model.workflow_scheme_issue_type_mappings import WorkflowSchemeIssueTypeMappings
from atlassian_jira_python_sdk.model.workflow_scheme_issue_types import WorkflowSchemeIssueTypes
from atlassian_jira_python_sdk.model.workflow_scheme_original_issue_type_mappings import WorkflowSchemeOriginalIssueTypeMappings
