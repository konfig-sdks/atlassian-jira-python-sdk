# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class NotificationRecipients(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of the users and groups to receive the notification.
    """


    class MetaOapg:
        
        class properties:
            assignee = schemas.BoolSchema
        
            @staticmethod
            def groupIds() -> typing.Type['NotificationRecipientsGroupIds']:
                return NotificationRecipientsGroupIds
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GroupName']:
                        return GroupName
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GroupName'], typing.List['GroupName']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupName':
                    return super().__getitem__(i)
            reporter = schemas.BoolSchema
            
            
            class users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserDetails']:
                        return UserDetails
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UserDetails'], typing.List['UserDetails']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'users':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserDetails':
                    return super().__getitem__(i)
            voters = schemas.BoolSchema
            watchers = schemas.BoolSchema
            __annotations__ = {
                "assignee": assignee,
                "groupIds": groupIds,
                "groups": groups,
                "reporter": reporter,
                "users": users,
                "voters": voters,
                "watchers": watchers,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignee"]) -> MetaOapg.properties.assignee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupIds"]) -> 'NotificationRecipientsGroupIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reporter"]) -> MetaOapg.properties.reporter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voters"]) -> MetaOapg.properties.voters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watchers"]) -> MetaOapg.properties.watchers: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assignee"], typing_extensions.Literal["groupIds"], typing_extensions.Literal["groups"], typing_extensions.Literal["reporter"], typing_extensions.Literal["users"], typing_extensions.Literal["voters"], typing_extensions.Literal["watchers"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignee"]) -> typing.Union[MetaOapg.properties.assignee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupIds"]) -> typing.Union['NotificationRecipientsGroupIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reporter"]) -> typing.Union[MetaOapg.properties.reporter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union[MetaOapg.properties.users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voters"]) -> typing.Union[MetaOapg.properties.voters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watchers"]) -> typing.Union[MetaOapg.properties.watchers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assignee"], typing_extensions.Literal["groupIds"], typing_extensions.Literal["groups"], typing_extensions.Literal["reporter"], typing_extensions.Literal["users"], typing_extensions.Literal["voters"], typing_extensions.Literal["watchers"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        assignee: typing.Union[MetaOapg.properties.assignee, bool, schemas.Unset] = schemas.unset,
        groupIds: typing.Union['NotificationRecipientsGroupIds', schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, schemas.Unset] = schemas.unset,
        reporter: typing.Union[MetaOapg.properties.reporter, bool, schemas.Unset] = schemas.unset,
        users: typing.Union[MetaOapg.properties.users, list, tuple, schemas.Unset] = schemas.unset,
        voters: typing.Union[MetaOapg.properties.voters, bool, schemas.Unset] = schemas.unset,
        watchers: typing.Union[MetaOapg.properties.watchers, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'NotificationRecipients':
        return super().__new__(
            cls,
            *args,
            assignee=assignee,
            groupIds=groupIds,
            groups=groups,
            reporter=reporter,
            users=users,
            voters=voters,
            watchers=watchers,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.group_name import GroupName
from atlassian_jira_python_sdk.model.notification_recipients_group_ids import NotificationRecipientsGroupIds
from atlassian_jira_python_sdk.model.user_details import UserDetails
