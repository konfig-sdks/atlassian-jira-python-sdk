# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class WorkflowTransitions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The transitions of the workflow.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            
            
            class actions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowRuleConfiguration']:
                        return WorkflowRuleConfiguration
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowRuleConfiguration'], typing.List['WorkflowRuleConfiguration']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'actions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowRuleConfiguration':
                    return super().__getitem__(i)
        
            @staticmethod
            def conditions() -> typing.Type['ConditionGroupConfiguration']:
                return ConditionGroupConfiguration
            
            
            class customIssueEventId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customIssueEventId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class _from(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowStatusAndPort']:
                        return WorkflowStatusAndPort
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowStatusAndPort'], typing.List['WorkflowStatusAndPort']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> '_from':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowStatusAndPort':
                    return super().__getitem__(i)
            id = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def properties() -> typing.Type['WorkflowTransitionsProperties']:
                return WorkflowTransitionsProperties
        
            @staticmethod
            def to() -> typing.Type['WorkflowStatusAndPort']:
                return WorkflowStatusAndPort
        
            @staticmethod
            def transitionScreen() -> typing.Type['WorkflowRuleConfiguration']:
                return WorkflowRuleConfiguration
            
            
            class triggers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowTrigger']:
                        return WorkflowTrigger
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowTrigger'], typing.List['WorkflowTrigger']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'triggers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowTrigger':
                    return super().__getitem__(i)
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "INITIAL": "INITIAL",
                        "GLOBAL": "GLOBAL",
                        "DIRECTED": "DIRECTED",
                    }
                
                @schemas.classproperty
                def INITIAL(cls):
                    return cls("INITIAL")
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
                
                @schemas.classproperty
                def DIRECTED(cls):
                    return cls("DIRECTED")
            
            
            class validators(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowRuleConfiguration']:
                        return WorkflowRuleConfiguration
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowRuleConfiguration'], typing.List['WorkflowRuleConfiguration']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'validators':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowRuleConfiguration':
                    return super().__getitem__(i)
            __annotations__ = {
                "description": description,
                "actions": actions,
                "conditions": conditions,
                "customIssueEventId": customIssueEventId,
                "from": _from,
                "id": id,
                "name": name,
                "properties": properties,
                "to": to,
                "transitionScreen": transitionScreen,
                "triggers": triggers,
                "type": type,
                "validators": validators,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actions"]) -> MetaOapg.properties.actions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> 'ConditionGroupConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customIssueEventId"]) -> MetaOapg.properties.customIssueEventId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> 'WorkflowTransitionsProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> 'WorkflowStatusAndPort': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transitionScreen"]) -> 'WorkflowRuleConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triggers"]) -> MetaOapg.properties.triggers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validators"]) -> MetaOapg.properties.validators: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "actions", "conditions", "customIssueEventId", "from", "id", "name", "properties", "to", "transitionScreen", "triggers", "type", "validators", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actions"]) -> typing.Union[MetaOapg.properties.actions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union['ConditionGroupConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customIssueEventId"]) -> typing.Union[MetaOapg.properties.customIssueEventId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union['WorkflowTransitionsProperties', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union['WorkflowStatusAndPort', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transitionScreen"]) -> typing.Union['WorkflowRuleConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triggers"]) -> typing.Union[MetaOapg.properties.triggers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validators"]) -> typing.Union[MetaOapg.properties.validators, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "actions", "conditions", "customIssueEventId", "from", "id", "name", "properties", "to", "transitionScreen", "triggers", "type", "validators", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        actions: typing.Union[MetaOapg.properties.actions, list, tuple, schemas.Unset] = schemas.unset,
        conditions: typing.Union['ConditionGroupConfiguration', schemas.Unset] = schemas.unset,
        customIssueEventId: typing.Union[MetaOapg.properties.customIssueEventId, None, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        properties: typing.Union['WorkflowTransitionsProperties', schemas.Unset] = schemas.unset,
        to: typing.Union['WorkflowStatusAndPort', schemas.Unset] = schemas.unset,
        transitionScreen: typing.Union['WorkflowRuleConfiguration', schemas.Unset] = schemas.unset,
        triggers: typing.Union[MetaOapg.properties.triggers, list, tuple, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        validators: typing.Union[MetaOapg.properties.validators, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowTransitions':
        return super().__new__(
            cls,
            *args,
            description=description,
            actions=actions,
            conditions=conditions,
            customIssueEventId=customIssueEventId,
            id=id,
            name=name,
            properties=properties,
            to=to,
            transitionScreen=transitionScreen,
            triggers=triggers,
            type=type,
            validators=validators,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.condition_group_configuration import ConditionGroupConfiguration
from atlassian_jira_python_sdk.model.workflow_rule_configuration import WorkflowRuleConfiguration
from atlassian_jira_python_sdk.model.workflow_status_and_port import WorkflowStatusAndPort
from atlassian_jira_python_sdk.model.workflow_transitions_properties import WorkflowTransitionsProperties
from atlassian_jira_python_sdk.model.workflow_trigger import WorkflowTrigger
