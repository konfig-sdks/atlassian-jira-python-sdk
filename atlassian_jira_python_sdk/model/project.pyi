# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class Project(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about a project.
    """


    class MetaOapg:
        
        class properties:
            
            
            class components(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProjectComponent']:
                        return ProjectComponent
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProjectComponent'], typing.List['ProjectComponent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'components':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProjectComponent':
                    return super().__getitem__(i)
            description = schemas.StrSchema
            archived = schemas.BoolSchema
        
            @staticmethod
            def archivedBy() -> typing.Type['User']:
                return User
            archivedDate = schemas.DateTimeSchema
            
            
            class assigneeType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PROJECT_LEAD(cls):
                    return cls("PROJECT_LEAD")
                
                @schemas.classproperty
                def UNASSIGNED(cls):
                    return cls("UNASSIGNED")
        
            @staticmethod
            def avatarUrls() -> typing.Type['AvatarUrlsBean']:
                return AvatarUrlsBean
            deleted = schemas.BoolSchema
        
            @staticmethod
            def deletedBy() -> typing.Type['User']:
                return User
            deletedDate = schemas.DateTimeSchema
            email = schemas.StrSchema
            expand = schemas.StrSchema
            favourite = schemas.BoolSchema
            id = schemas.StrSchema
        
            @staticmethod
            def insight() -> typing.Type['ProjectInsight']:
                return ProjectInsight
            isPrivate = schemas.BoolSchema
        
            @staticmethod
            def issueTypeHierarchy() -> typing.Type['Hierarchy']:
                return Hierarchy
            
            
            class issueTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IssueTypeDetails']:
                        return IssueTypeDetails
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['IssueTypeDetails'], typing.List['IssueTypeDetails']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'issueTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IssueTypeDetails':
                    return super().__getitem__(i)
            key = schemas.StrSchema
        
            @staticmethod
            def landingPageInfo() -> typing.Type['ProjectLandingPageInfo']:
                return ProjectLandingPageInfo
        
            @staticmethod
            def lead() -> typing.Type['User']:
                return User
            name = schemas.StrSchema
        
            @staticmethod
            def permissions() -> typing.Type['ProjectPermissions']:
                return ProjectPermissions
        
            @staticmethod
            def projectCategory() -> typing.Type['ProjectCategory']:
                return ProjectCategory
            
            
            class projectTypeKey(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SOFTWARE(cls):
                    return cls("software")
                
                @schemas.classproperty
                def SERVICE_DESK(cls):
                    return cls("service_desk")
                
                @schemas.classproperty
                def BUSINESS(cls):
                    return cls("business")
        
            @staticmethod
            def properties() -> typing.Type['ProjectProperties']:
                return ProjectProperties
            retentionTillDate = schemas.DateTimeSchema
        
            @staticmethod
            def roles() -> typing.Type['ProjectRoles']:
                return ProjectRoles
            _self = schemas.StrSchema
            simplified = schemas.BoolSchema
            
            
            class style(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CLASSIC(cls):
                    return cls("classic")
                
                @schemas.classproperty
                def NEXTGEN(cls):
                    return cls("next-gen")
            url = schemas.StrSchema
            uuid = schemas.UUIDSchema
            
            
            class versions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Version']:
                        return Version
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Version'], typing.List['Version']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'versions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Version':
                    return super().__getitem__(i)
            __annotations__ = {
                "components": components,
                "description": description,
                "archived": archived,
                "archivedBy": archivedBy,
                "archivedDate": archivedDate,
                "assigneeType": assigneeType,
                "avatarUrls": avatarUrls,
                "deleted": deleted,
                "deletedBy": deletedBy,
                "deletedDate": deletedDate,
                "email": email,
                "expand": expand,
                "favourite": favourite,
                "id": id,
                "insight": insight,
                "isPrivate": isPrivate,
                "issueTypeHierarchy": issueTypeHierarchy,
                "issueTypes": issueTypes,
                "key": key,
                "landingPageInfo": landingPageInfo,
                "lead": lead,
                "name": name,
                "permissions": permissions,
                "projectCategory": projectCategory,
                "projectTypeKey": projectTypeKey,
                "properties": properties,
                "retentionTillDate": retentionTillDate,
                "roles": roles,
                "self": _self,
                "simplified": simplified,
                "style": style,
                "url": url,
                "uuid": uuid,
                "versions": versions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["components"]) -> MetaOapg.properties.components: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archivedBy"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archivedDate"]) -> MetaOapg.properties.archivedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigneeType"]) -> MetaOapg.properties.assigneeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatarUrls"]) -> 'AvatarUrlsBean': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletedBy"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletedDate"]) -> MetaOapg.properties.deletedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expand"]) -> MetaOapg.properties.expand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["favourite"]) -> MetaOapg.properties.favourite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insight"]) -> 'ProjectInsight': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPrivate"]) -> MetaOapg.properties.isPrivate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueTypeHierarchy"]) -> 'Hierarchy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueTypes"]) -> MetaOapg.properties.issueTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["landingPageInfo"]) -> 'ProjectLandingPageInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lead"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> 'ProjectPermissions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectCategory"]) -> 'ProjectCategory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectTypeKey"]) -> MetaOapg.properties.projectTypeKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> 'ProjectProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retentionTillDate"]) -> MetaOapg.properties.retentionTillDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> 'ProjectRoles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["self"]) -> MetaOapg.properties._self: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["simplified"]) -> MetaOapg.properties.simplified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["style"]) -> MetaOapg.properties.style: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versions"]) -> MetaOapg.properties.versions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["components", "description", "archived", "archivedBy", "archivedDate", "assigneeType", "avatarUrls", "deleted", "deletedBy", "deletedDate", "email", "expand", "favourite", "id", "insight", "isPrivate", "issueTypeHierarchy", "issueTypes", "key", "landingPageInfo", "lead", "name", "permissions", "projectCategory", "projectTypeKey", "properties", "retentionTillDate", "roles", "self", "simplified", "style", "url", "uuid", "versions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["components"]) -> typing.Union[MetaOapg.properties.components, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archivedBy"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archivedDate"]) -> typing.Union[MetaOapg.properties.archivedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigneeType"]) -> typing.Union[MetaOapg.properties.assigneeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatarUrls"]) -> typing.Union['AvatarUrlsBean', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletedBy"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletedDate"]) -> typing.Union[MetaOapg.properties.deletedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expand"]) -> typing.Union[MetaOapg.properties.expand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["favourite"]) -> typing.Union[MetaOapg.properties.favourite, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insight"]) -> typing.Union['ProjectInsight', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPrivate"]) -> typing.Union[MetaOapg.properties.isPrivate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueTypeHierarchy"]) -> typing.Union['Hierarchy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueTypes"]) -> typing.Union[MetaOapg.properties.issueTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["landingPageInfo"]) -> typing.Union['ProjectLandingPageInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lead"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union['ProjectPermissions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectCategory"]) -> typing.Union['ProjectCategory', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectTypeKey"]) -> typing.Union[MetaOapg.properties.projectTypeKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union['ProjectProperties', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retentionTillDate"]) -> typing.Union[MetaOapg.properties.retentionTillDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union['ProjectRoles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union[MetaOapg.properties._self, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["simplified"]) -> typing.Union[MetaOapg.properties.simplified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["style"]) -> typing.Union[MetaOapg.properties.style, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versions"]) -> typing.Union[MetaOapg.properties.versions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["components", "description", "archived", "archivedBy", "archivedDate", "assigneeType", "avatarUrls", "deleted", "deletedBy", "deletedDate", "email", "expand", "favourite", "id", "insight", "isPrivate", "issueTypeHierarchy", "issueTypes", "key", "landingPageInfo", "lead", "name", "permissions", "projectCategory", "projectTypeKey", "properties", "retentionTillDate", "roles", "self", "simplified", "style", "url", "uuid", "versions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        components: typing.Union[MetaOapg.properties.components, list, tuple, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        archivedBy: typing.Union['User', schemas.Unset] = schemas.unset,
        archivedDate: typing.Union[MetaOapg.properties.archivedDate, str, datetime, schemas.Unset] = schemas.unset,
        assigneeType: typing.Union[MetaOapg.properties.assigneeType, str, schemas.Unset] = schemas.unset,
        avatarUrls: typing.Union['AvatarUrlsBean', schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        deletedBy: typing.Union['User', schemas.Unset] = schemas.unset,
        deletedDate: typing.Union[MetaOapg.properties.deletedDate, str, datetime, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        expand: typing.Union[MetaOapg.properties.expand, str, schemas.Unset] = schemas.unset,
        favourite: typing.Union[MetaOapg.properties.favourite, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        insight: typing.Union['ProjectInsight', schemas.Unset] = schemas.unset,
        isPrivate: typing.Union[MetaOapg.properties.isPrivate, bool, schemas.Unset] = schemas.unset,
        issueTypeHierarchy: typing.Union['Hierarchy', schemas.Unset] = schemas.unset,
        issueTypes: typing.Union[MetaOapg.properties.issueTypes, list, tuple, schemas.Unset] = schemas.unset,
        key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
        landingPageInfo: typing.Union['ProjectLandingPageInfo', schemas.Unset] = schemas.unset,
        lead: typing.Union['User', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        permissions: typing.Union['ProjectPermissions', schemas.Unset] = schemas.unset,
        projectCategory: typing.Union['ProjectCategory', schemas.Unset] = schemas.unset,
        projectTypeKey: typing.Union[MetaOapg.properties.projectTypeKey, str, schemas.Unset] = schemas.unset,
        properties: typing.Union['ProjectProperties', schemas.Unset] = schemas.unset,
        retentionTillDate: typing.Union[MetaOapg.properties.retentionTillDate, str, datetime, schemas.Unset] = schemas.unset,
        roles: typing.Union['ProjectRoles', schemas.Unset] = schemas.unset,
        simplified: typing.Union[MetaOapg.properties.simplified, bool, schemas.Unset] = schemas.unset,
        style: typing.Union[MetaOapg.properties.style, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        versions: typing.Union[MetaOapg.properties.versions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Project':
        return super().__new__(
            cls,
            *args,
            components=components,
            description=description,
            archived=archived,
            archivedBy=archivedBy,
            archivedDate=archivedDate,
            assigneeType=assigneeType,
            avatarUrls=avatarUrls,
            deleted=deleted,
            deletedBy=deletedBy,
            deletedDate=deletedDate,
            email=email,
            expand=expand,
            favourite=favourite,
            id=id,
            insight=insight,
            isPrivate=isPrivate,
            issueTypeHierarchy=issueTypeHierarchy,
            issueTypes=issueTypes,
            key=key,
            landingPageInfo=landingPageInfo,
            lead=lead,
            name=name,
            permissions=permissions,
            projectCategory=projectCategory,
            projectTypeKey=projectTypeKey,
            properties=properties,
            retentionTillDate=retentionTillDate,
            roles=roles,
            simplified=simplified,
            style=style,
            url=url,
            uuid=uuid,
            versions=versions,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.avatar_urls_bean import AvatarUrlsBean
from atlassian_jira_python_sdk.model.hierarchy import Hierarchy
from atlassian_jira_python_sdk.model.issue_type_details import IssueTypeDetails
from atlassian_jira_python_sdk.model.project_category import ProjectCategory
from atlassian_jira_python_sdk.model.project_component import ProjectComponent
from atlassian_jira_python_sdk.model.project_insight import ProjectInsight
from atlassian_jira_python_sdk.model.project_landing_page_info import ProjectLandingPageInfo
from atlassian_jira_python_sdk.model.project_permissions import ProjectPermissions
from atlassian_jira_python_sdk.model.project_properties import ProjectProperties
from atlassian_jira_python_sdk.model.project_roles import ProjectRoles
from atlassian_jira_python_sdk.model.user import User
from atlassian_jira_python_sdk.model.version import Version
