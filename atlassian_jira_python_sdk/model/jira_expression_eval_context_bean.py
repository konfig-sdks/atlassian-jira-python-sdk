# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class JiraExpressionEvalContextBean(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            board = schemas.Int64Schema
            
            
            class custom(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomContextVariable']:
                        return CustomContextVariable
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CustomContextVariable'], typing.List['CustomContextVariable']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomContextVariable':
                    return super().__getitem__(i)
            customerRequest = schemas.Int64Schema
        
            @staticmethod
            def issue() -> typing.Type['IdOrKeyBean']:
                return IdOrKeyBean
        
            @staticmethod
            def issues() -> typing.Type['JexpIssues']:
                return JexpIssues
        
            @staticmethod
            def project() -> typing.Type['IdOrKeyBean']:
                return IdOrKeyBean
            serviceDesk = schemas.Int64Schema
            sprint = schemas.Int64Schema
            __annotations__ = {
                "board": board,
                "custom": custom,
                "customerRequest": customerRequest,
                "issue": issue,
                "issues": issues,
                "project": project,
                "serviceDesk": serviceDesk,
                "sprint": sprint,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["board"]) -> MetaOapg.properties.board: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom"]) -> MetaOapg.properties.custom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerRequest"]) -> MetaOapg.properties.customerRequest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issue"]) -> 'IdOrKeyBean': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issues"]) -> 'JexpIssues': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'IdOrKeyBean': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceDesk"]) -> MetaOapg.properties.serviceDesk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sprint"]) -> MetaOapg.properties.sprint: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["board", "custom", "customerRequest", "issue", "issues", "project", "serviceDesk", "sprint", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["board"]) -> typing.Union[MetaOapg.properties.board, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom"]) -> typing.Union[MetaOapg.properties.custom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerRequest"]) -> typing.Union[MetaOapg.properties.customerRequest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issue"]) -> typing.Union['IdOrKeyBean', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issues"]) -> typing.Union['JexpIssues', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['IdOrKeyBean', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceDesk"]) -> typing.Union[MetaOapg.properties.serviceDesk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sprint"]) -> typing.Union[MetaOapg.properties.sprint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["board", "custom", "customerRequest", "issue", "issues", "project", "serviceDesk", "sprint", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        board: typing.Union[MetaOapg.properties.board, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        custom: typing.Union[MetaOapg.properties.custom, list, tuple, schemas.Unset] = schemas.unset,
        customerRequest: typing.Union[MetaOapg.properties.customerRequest, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        issue: typing.Union['IdOrKeyBean', schemas.Unset] = schemas.unset,
        issues: typing.Union['JexpIssues', schemas.Unset] = schemas.unset,
        project: typing.Union['IdOrKeyBean', schemas.Unset] = schemas.unset,
        serviceDesk: typing.Union[MetaOapg.properties.serviceDesk, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sprint: typing.Union[MetaOapg.properties.sprint, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JiraExpressionEvalContextBean':
        return super().__new__(
            cls,
            *args,
            board=board,
            custom=custom,
            customerRequest=customerRequest,
            issue=issue,
            issues=issues,
            project=project,
            serviceDesk=serviceDesk,
            sprint=sprint,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.custom_context_variable import CustomContextVariable
from atlassian_jira_python_sdk.model.id_or_key_bean import IdOrKeyBean
from atlassian_jira_python_sdk.model.jexp_issues import JexpIssues
