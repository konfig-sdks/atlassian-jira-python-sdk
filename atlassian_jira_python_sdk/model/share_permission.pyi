# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class SharePermission(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of a share permission for the filter.
    """


    class MetaOapg:
        required = {
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def USER(cls):
                    return cls("user")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("group")
                
                @schemas.classproperty
                def PROJECT(cls):
                    return cls("project")
                
                @schemas.classproperty
                def PROJECT_ROLE(cls):
                    return cls("projectRole")
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("global")
                
                @schemas.classproperty
                def LOGGEDIN(cls):
                    return cls("loggedin")
                
                @schemas.classproperty
                def AUTHENTICATED(cls):
                    return cls("authenticated")
                
                @schemas.classproperty
                def PROJECTUNKNOWN(cls):
                    return cls("project-unknown")
        
            @staticmethod
            def group() -> typing.Type['GroupName']:
                return GroupName
            id = schemas.Int64Schema
        
            @staticmethod
            def project() -> typing.Type['Project']:
                return Project
        
            @staticmethod
            def role() -> typing.Type['ProjectRole']:
                return ProjectRole
        
            @staticmethod
            def user() -> typing.Type['UserBean']:
                return UserBean
            __annotations__ = {
                "type": type,
                "group": group,
                "id": id,
                "project": project,
                "role": role,
                "user": user,
            }
    
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'GroupName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'Project': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> 'ProjectRole': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'UserBean': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "group", "id", "project", "role", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union['GroupName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['Project', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> typing.Union['ProjectRole', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['UserBean', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "group", "id", "project", "role", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        group: typing.Union['GroupName', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        project: typing.Union['Project', schemas.Unset] = schemas.unset,
        role: typing.Union['ProjectRole', schemas.Unset] = schemas.unset,
        user: typing.Union['UserBean', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SharePermission':
        return super().__new__(
            cls,
            *args,
            type=type,
            group=group,
            id=id,
            project=project,
            role=role,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.group_name import GroupName
from atlassian_jira_python_sdk.model.project import Project
from atlassian_jira_python_sdk.model.project_role import ProjectRole
from atlassian_jira_python_sdk.model.user_bean import UserBean
