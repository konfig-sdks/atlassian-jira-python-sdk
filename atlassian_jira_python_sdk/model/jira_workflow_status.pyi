# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class JiraWorkflowStatus(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of a status.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            id = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def scope() -> typing.Type['WorkflowScope']:
                return WorkflowScope
            
            
            class statusCategory(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TODO(cls):
                    return cls("TODO")
                
                @schemas.classproperty
                def IN_PROGRESS(cls):
                    return cls("IN_PROGRESS")
                
                @schemas.classproperty
                def DONE(cls):
                    return cls("DONE")
            statusReference = schemas.StrSchema
            
            
            class usages(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProjectIssueTypes']:
                        return ProjectIssueTypes
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProjectIssueTypes'], typing.List['ProjectIssueTypes']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'usages':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProjectIssueTypes':
                    return super().__getitem__(i)
            __annotations__ = {
                "description": description,
                "id": id,
                "name": name,
                "scope": scope,
                "statusCategory": statusCategory,
                "statusReference": statusReference,
                "usages": usages,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> 'WorkflowScope': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusCategory"]) -> MetaOapg.properties.statusCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusReference"]) -> MetaOapg.properties.statusReference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usages"]) -> MetaOapg.properties.usages: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "scope", "statusCategory", "statusReference", "usages", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union['WorkflowScope', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusCategory"]) -> typing.Union[MetaOapg.properties.statusCategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusReference"]) -> typing.Union[MetaOapg.properties.statusReference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usages"]) -> typing.Union[MetaOapg.properties.usages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "scope", "statusCategory", "statusReference", "usages", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        scope: typing.Union['WorkflowScope', schemas.Unset] = schemas.unset,
        statusCategory: typing.Union[MetaOapg.properties.statusCategory, str, schemas.Unset] = schemas.unset,
        statusReference: typing.Union[MetaOapg.properties.statusReference, str, schemas.Unset] = schemas.unset,
        usages: typing.Union[MetaOapg.properties.usages, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JiraWorkflowStatus':
        return super().__new__(
            cls,
            *args,
            description=description,
            id=id,
            name=name,
            scope=scope,
            statusCategory=statusCategory,
            statusReference=statusReference,
            usages=usages,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.project_issue_types import ProjectIssueTypes
from atlassian_jira_python_sdk.model.workflow_scope import WorkflowScope
