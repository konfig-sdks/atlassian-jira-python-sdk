# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class SearchResults(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The result of a JQL search.
    """


    class MetaOapg:
        
        class properties:
            expand = schemas.StrSchema
            
            
            class issues(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IssueBean']:
                        return IssueBean
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['IssueBean'], typing.List['IssueBean']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'issues':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IssueBean':
                    return super().__getitem__(i)
            maxResults = schemas.Int32Schema
        
            @staticmethod
            def names() -> typing.Type['SearchResultsNames']:
                return SearchResultsNames
        
            @staticmethod
            def schema() -> typing.Type['SearchResultsSchema']:
                return SearchResultsSchema
            startAt = schemas.Int32Schema
            total = schemas.Int32Schema
        
            @staticmethod
            def warningMessages() -> typing.Type['SearchResultsWarningMessages']:
                return SearchResultsWarningMessages
            __annotations__ = {
                "expand": expand,
                "issues": issues,
                "maxResults": maxResults,
                "names": names,
                "schema": schema,
                "startAt": startAt,
                "total": total,
                "warningMessages": warningMessages,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expand"]) -> MetaOapg.properties.expand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issues"]) -> MetaOapg.properties.issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxResults"]) -> MetaOapg.properties.maxResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["names"]) -> 'SearchResultsNames': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schema"]) -> 'SearchResultsSchema': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startAt"]) -> MetaOapg.properties.startAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warningMessages"]) -> 'SearchResultsWarningMessages': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expand", "issues", "maxResults", "names", "schema", "startAt", "total", "warningMessages", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expand"]) -> typing.Union[MetaOapg.properties.expand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issues"]) -> typing.Union[MetaOapg.properties.issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxResults"]) -> typing.Union[MetaOapg.properties.maxResults, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["names"]) -> typing.Union['SearchResultsNames', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schema"]) -> typing.Union['SearchResultsSchema', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startAt"]) -> typing.Union[MetaOapg.properties.startAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warningMessages"]) -> typing.Union['SearchResultsWarningMessages', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expand", "issues", "maxResults", "names", "schema", "startAt", "total", "warningMessages", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        expand: typing.Union[MetaOapg.properties.expand, str, schemas.Unset] = schemas.unset,
        issues: typing.Union[MetaOapg.properties.issues, list, tuple, schemas.Unset] = schemas.unset,
        maxResults: typing.Union[MetaOapg.properties.maxResults, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        names: typing.Union['SearchResultsNames', schemas.Unset] = schemas.unset,
        schema: typing.Union['SearchResultsSchema', schemas.Unset] = schemas.unset,
        startAt: typing.Union[MetaOapg.properties.startAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        warningMessages: typing.Union['SearchResultsWarningMessages', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchResults':
        return super().__new__(
            cls,
            *args,
            expand=expand,
            issues=issues,
            maxResults=maxResults,
            names=names,
            schema=schema,
            startAt=startAt,
            total=total,
            warningMessages=warningMessages,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.issue_bean import IssueBean
from atlassian_jira_python_sdk.model.search_results_names import SearchResultsNames
from atlassian_jira_python_sdk.model.search_results_schema import SearchResultsSchema
from atlassian_jira_python_sdk.model.search_results_warning_messages import SearchResultsWarningMessages
