# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class Avatar(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of an avatar.
    """


    class MetaOapg:
        required = {
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
            fileName = schemas.StrSchema
            isDeletable = schemas.BoolSchema
            isSelected = schemas.BoolSchema
            isSystemAvatar = schemas.BoolSchema
            owner = schemas.StrSchema
        
            @staticmethod
            def urls() -> typing.Type['AvatarUrls']:
                return AvatarUrls
            __annotations__ = {
                "id": id,
                "fileName": fileName,
                "isDeletable": isDeletable,
                "isSelected": isSelected,
                "isSystemAvatar": isSystemAvatar,
                "owner": owner,
                "urls": urls,
            }
        additional_properties = schemas.AnyTypeSchema
    
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileName"]) -> MetaOapg.properties.fileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDeletable"]) -> MetaOapg.properties.isDeletable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSelected"]) -> MetaOapg.properties.isSelected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSystemAvatar"]) -> MetaOapg.properties.isSystemAvatar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urls"]) -> 'AvatarUrls': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["fileName"], typing_extensions.Literal["isDeletable"], typing_extensions.Literal["isSelected"], typing_extensions.Literal["isSystemAvatar"], typing_extensions.Literal["owner"], typing_extensions.Literal["urls"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileName"]) -> typing.Union[MetaOapg.properties.fileName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDeletable"]) -> typing.Union[MetaOapg.properties.isDeletable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSelected"]) -> typing.Union[MetaOapg.properties.isSelected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSystemAvatar"]) -> typing.Union[MetaOapg.properties.isSystemAvatar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urls"]) -> typing.Union['AvatarUrls', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["fileName"], typing_extensions.Literal["isDeletable"], typing_extensions.Literal["isSelected"], typing_extensions.Literal["isSystemAvatar"], typing_extensions.Literal["owner"], typing_extensions.Literal["urls"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        fileName: typing.Union[MetaOapg.properties.fileName, str, schemas.Unset] = schemas.unset,
        isDeletable: typing.Union[MetaOapg.properties.isDeletable, bool, schemas.Unset] = schemas.unset,
        isSelected: typing.Union[MetaOapg.properties.isSelected, bool, schemas.Unset] = schemas.unset,
        isSystemAvatar: typing.Union[MetaOapg.properties.isSystemAvatar, bool, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        urls: typing.Union['AvatarUrls', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Avatar':
        return super().__new__(
            cls,
            *args,
            id=id,
            fileName=fileName,
            isDeletable=isDeletable,
            isSelected=isSelected,
            isSystemAvatar=isSystemAvatar,
            owner=owner,
            urls=urls,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.avatar_urls import AvatarUrls
