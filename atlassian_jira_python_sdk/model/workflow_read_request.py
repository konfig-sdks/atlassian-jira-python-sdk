# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class WorkflowReadRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class projectAndIssueTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProjectAndIssueTypePair']:
                        return ProjectAndIssueTypePair
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProjectAndIssueTypePair'], typing.List['ProjectAndIssueTypePair']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'projectAndIssueTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProjectAndIssueTypePair':
                    return super().__getitem__(i)
        
            @staticmethod
            def workflowIds() -> typing.Type['WorkflowReadRequestWorkflowIds']:
                return WorkflowReadRequestWorkflowIds
        
            @staticmethod
            def workflowNames() -> typing.Type['WorkflowReadRequestWorkflowNames']:
                return WorkflowReadRequestWorkflowNames
            __annotations__ = {
                "projectAndIssueTypes": projectAndIssueTypes,
                "workflowIds": workflowIds,
                "workflowNames": workflowNames,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectAndIssueTypes"]) -> MetaOapg.properties.projectAndIssueTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowIds"]) -> 'WorkflowReadRequestWorkflowIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowNames"]) -> 'WorkflowReadRequestWorkflowNames': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["projectAndIssueTypes", "workflowIds", "workflowNames", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectAndIssueTypes"]) -> typing.Union[MetaOapg.properties.projectAndIssueTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowIds"]) -> typing.Union['WorkflowReadRequestWorkflowIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowNames"]) -> typing.Union['WorkflowReadRequestWorkflowNames', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["projectAndIssueTypes", "workflowIds", "workflowNames", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        projectAndIssueTypes: typing.Union[MetaOapg.properties.projectAndIssueTypes, list, tuple, schemas.Unset] = schemas.unset,
        workflowIds: typing.Union['WorkflowReadRequestWorkflowIds', schemas.Unset] = schemas.unset,
        workflowNames: typing.Union['WorkflowReadRequestWorkflowNames', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowReadRequest':
        return super().__new__(
            cls,
            *args,
            projectAndIssueTypes=projectAndIssueTypes,
            workflowIds=workflowIds,
            workflowNames=workflowNames,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.project_and_issue_type_pair import ProjectAndIssueTypePair
from atlassian_jira_python_sdk.model.workflow_read_request_workflow_ids import WorkflowReadRequestWorkflowIds
from atlassian_jira_python_sdk.model.workflow_read_request_workflow_names import WorkflowReadRequestWorkflowNames
