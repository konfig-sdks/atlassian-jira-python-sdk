# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class JiraExpressionValidationError(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:

 *  `line` and `column`
 *  `expression`
    """


    class MetaOapg:
        required = {
            "message",
            "type",
        }
        
        class properties:
            message = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "syntax": "SYNTAX",
                        "type": "TYPE",
                        "other": "OTHER",
                    }
                
                @schemas.classproperty
                def SYNTAX(cls):
                    return cls("syntax")
                
                @schemas.classproperty
                def TYPE(cls):
                    return cls("type")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
            column = schemas.Int32Schema
            expression = schemas.StrSchema
            line = schemas.Int32Schema
            __annotations__ = {
                "message": message,
                "type": type,
                "column": column,
                "expression": expression,
                "line": line,
            }
    
    message: MetaOapg.properties.message
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["column"]) -> MetaOapg.properties.column: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expression"]) -> MetaOapg.properties.expression: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line"]) -> MetaOapg.properties.line: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["message", "type", "column", "expression", "line", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["column"]) -> typing.Union[MetaOapg.properties.column, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expression"]) -> typing.Union[MetaOapg.properties.expression, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line"]) -> typing.Union[MetaOapg.properties.line, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message", "type", "column", "expression", "line", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        message: typing.Union[MetaOapg.properties.message, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        column: typing.Union[MetaOapg.properties.column, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expression: typing.Union[MetaOapg.properties.expression, str, schemas.Unset] = schemas.unset,
        line: typing.Union[MetaOapg.properties.line, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JiraExpressionValidationError':
        return super().__new__(
            cls,
            *args,
            message=message,
            type=type,
            column=column,
            expression=expression,
            line=line,
            _configuration=_configuration,
            **kwargs,
        )
