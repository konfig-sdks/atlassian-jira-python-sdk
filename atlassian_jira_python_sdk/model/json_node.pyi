# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class JsonNode(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            array = schemas.BoolSchema
            bigDecimal = schemas.BoolSchema
            bigInteger = schemas.BoolSchema
            bigIntegerValue = schemas.IntSchema
            binary = schemas.BoolSchema
        
            @staticmethod
            def binaryValue() -> typing.Type['JsonNodeBinaryValue']:
                return JsonNodeBinaryValue
            boolean = schemas.BoolSchema
            booleanValue = schemas.BoolSchema
            containerNode = schemas.BoolSchema
            decimalValue = schemas.NumberSchema
            double = schemas.BoolSchema
            doubleValue = schemas.Float64Schema
            elements = schemas.DictSchema
            fieldNames = schemas.DictSchema
            fields = schemas.DictSchema
            floatingPointNumber = schemas.BoolSchema
            _int = schemas.BoolSchema
            intValue = schemas.Int32Schema
            integralNumber = schemas.BoolSchema
            long = schemas.BoolSchema
            longValue = schemas.Int64Schema
            missingNode = schemas.BoolSchema
            null = schemas.BoolSchema
            number = schemas.BoolSchema
            
            
            class numberType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INT(cls):
                    return cls("INT")
                
                @schemas.classproperty
                def LONG(cls):
                    return cls("LONG")
                
                @schemas.classproperty
                def BIG_INTEGER(cls):
                    return cls("BIG_INTEGER")
                
                @schemas.classproperty
                def FLOAT(cls):
                    return cls("FLOAT")
                
                @schemas.classproperty
                def DOUBLE(cls):
                    return cls("DOUBLE")
                
                @schemas.classproperty
                def BIG_DECIMAL(cls):
                    return cls("BIG_DECIMAL")
            numberValue = schemas.NumberSchema
            object = schemas.BoolSchema
            pojo = schemas.BoolSchema
            textValue = schemas.StrSchema
            textual = schemas.BoolSchema
            valueAsBoolean = schemas.BoolSchema
            valueAsDouble = schemas.Float64Schema
            valueAsInt = schemas.Int32Schema
            valueAsLong = schemas.Int64Schema
            valueAsText = schemas.StrSchema
            valueNode = schemas.BoolSchema
            __annotations__ = {
                "array": array,
                "bigDecimal": bigDecimal,
                "bigInteger": bigInteger,
                "bigIntegerValue": bigIntegerValue,
                "binary": binary,
                "binaryValue": binaryValue,
                "boolean": boolean,
                "booleanValue": booleanValue,
                "containerNode": containerNode,
                "decimalValue": decimalValue,
                "double": double,
                "doubleValue": doubleValue,
                "elements": elements,
                "fieldNames": fieldNames,
                "fields": fields,
                "floatingPointNumber": floatingPointNumber,
                "int": _int,
                "intValue": intValue,
                "integralNumber": integralNumber,
                "long": long,
                "longValue": longValue,
                "missingNode": missingNode,
                "null": null,
                "number": number,
                "numberType": numberType,
                "numberValue": numberValue,
                "object": object,
                "pojo": pojo,
                "textValue": textValue,
                "textual": textual,
                "valueAsBoolean": valueAsBoolean,
                "valueAsDouble": valueAsDouble,
                "valueAsInt": valueAsInt,
                "valueAsLong": valueAsLong,
                "valueAsText": valueAsText,
                "valueNode": valueNode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array"]) -> MetaOapg.properties.array: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bigDecimal"]) -> MetaOapg.properties.bigDecimal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bigInteger"]) -> MetaOapg.properties.bigInteger: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bigIntegerValue"]) -> MetaOapg.properties.bigIntegerValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["binary"]) -> MetaOapg.properties.binary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["binaryValue"]) -> 'JsonNodeBinaryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["boolean"]) -> MetaOapg.properties.boolean: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["booleanValue"]) -> MetaOapg.properties.booleanValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containerNode"]) -> MetaOapg.properties.containerNode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decimalValue"]) -> MetaOapg.properties.decimalValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["double"]) -> MetaOapg.properties.double: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["doubleValue"]) -> MetaOapg.properties.doubleValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elements"]) -> MetaOapg.properties.elements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldNames"]) -> MetaOapg.properties.fieldNames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["floatingPointNumber"]) -> MetaOapg.properties.floatingPointNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["int"]) -> MetaOapg.properties._int: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intValue"]) -> MetaOapg.properties.intValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integralNumber"]) -> MetaOapg.properties.integralNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["long"]) -> MetaOapg.properties.long: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longValue"]) -> MetaOapg.properties.longValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["missingNode"]) -> MetaOapg.properties.missingNode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["null"]) -> MetaOapg.properties.null: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberType"]) -> MetaOapg.properties.numberType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberValue"]) -> MetaOapg.properties.numberValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pojo"]) -> MetaOapg.properties.pojo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["textValue"]) -> MetaOapg.properties.textValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["textual"]) -> MetaOapg.properties.textual: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valueAsBoolean"]) -> MetaOapg.properties.valueAsBoolean: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valueAsDouble"]) -> MetaOapg.properties.valueAsDouble: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valueAsInt"]) -> MetaOapg.properties.valueAsInt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valueAsLong"]) -> MetaOapg.properties.valueAsLong: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valueAsText"]) -> MetaOapg.properties.valueAsText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valueNode"]) -> MetaOapg.properties.valueNode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["array", "bigDecimal", "bigInteger", "bigIntegerValue", "binary", "binaryValue", "boolean", "booleanValue", "containerNode", "decimalValue", "double", "doubleValue", "elements", "fieldNames", "fields", "floatingPointNumber", "int", "intValue", "integralNumber", "long", "longValue", "missingNode", "null", "number", "numberType", "numberValue", "object", "pojo", "textValue", "textual", "valueAsBoolean", "valueAsDouble", "valueAsInt", "valueAsLong", "valueAsText", "valueNode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array"]) -> typing.Union[MetaOapg.properties.array, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bigDecimal"]) -> typing.Union[MetaOapg.properties.bigDecimal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bigInteger"]) -> typing.Union[MetaOapg.properties.bigInteger, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bigIntegerValue"]) -> typing.Union[MetaOapg.properties.bigIntegerValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["binary"]) -> typing.Union[MetaOapg.properties.binary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["binaryValue"]) -> typing.Union['JsonNodeBinaryValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["boolean"]) -> typing.Union[MetaOapg.properties.boolean, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["booleanValue"]) -> typing.Union[MetaOapg.properties.booleanValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containerNode"]) -> typing.Union[MetaOapg.properties.containerNode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decimalValue"]) -> typing.Union[MetaOapg.properties.decimalValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["double"]) -> typing.Union[MetaOapg.properties.double, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["doubleValue"]) -> typing.Union[MetaOapg.properties.doubleValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elements"]) -> typing.Union[MetaOapg.properties.elements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldNames"]) -> typing.Union[MetaOapg.properties.fieldNames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union[MetaOapg.properties.fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["floatingPointNumber"]) -> typing.Union[MetaOapg.properties.floatingPointNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["int"]) -> typing.Union[MetaOapg.properties._int, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intValue"]) -> typing.Union[MetaOapg.properties.intValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integralNumber"]) -> typing.Union[MetaOapg.properties.integralNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["long"]) -> typing.Union[MetaOapg.properties.long, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longValue"]) -> typing.Union[MetaOapg.properties.longValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["missingNode"]) -> typing.Union[MetaOapg.properties.missingNode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["null"]) -> typing.Union[MetaOapg.properties.null, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberType"]) -> typing.Union[MetaOapg.properties.numberType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberValue"]) -> typing.Union[MetaOapg.properties.numberValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pojo"]) -> typing.Union[MetaOapg.properties.pojo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["textValue"]) -> typing.Union[MetaOapg.properties.textValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["textual"]) -> typing.Union[MetaOapg.properties.textual, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valueAsBoolean"]) -> typing.Union[MetaOapg.properties.valueAsBoolean, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valueAsDouble"]) -> typing.Union[MetaOapg.properties.valueAsDouble, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valueAsInt"]) -> typing.Union[MetaOapg.properties.valueAsInt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valueAsLong"]) -> typing.Union[MetaOapg.properties.valueAsLong, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valueAsText"]) -> typing.Union[MetaOapg.properties.valueAsText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valueNode"]) -> typing.Union[MetaOapg.properties.valueNode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["array", "bigDecimal", "bigInteger", "bigIntegerValue", "binary", "binaryValue", "boolean", "booleanValue", "containerNode", "decimalValue", "double", "doubleValue", "elements", "fieldNames", "fields", "floatingPointNumber", "int", "intValue", "integralNumber", "long", "longValue", "missingNode", "null", "number", "numberType", "numberValue", "object", "pojo", "textValue", "textual", "valueAsBoolean", "valueAsDouble", "valueAsInt", "valueAsLong", "valueAsText", "valueNode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        array: typing.Union[MetaOapg.properties.array, bool, schemas.Unset] = schemas.unset,
        bigDecimal: typing.Union[MetaOapg.properties.bigDecimal, bool, schemas.Unset] = schemas.unset,
        bigInteger: typing.Union[MetaOapg.properties.bigInteger, bool, schemas.Unset] = schemas.unset,
        bigIntegerValue: typing.Union[MetaOapg.properties.bigIntegerValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        binary: typing.Union[MetaOapg.properties.binary, bool, schemas.Unset] = schemas.unset,
        binaryValue: typing.Union['JsonNodeBinaryValue', schemas.Unset] = schemas.unset,
        boolean: typing.Union[MetaOapg.properties.boolean, bool, schemas.Unset] = schemas.unset,
        booleanValue: typing.Union[MetaOapg.properties.booleanValue, bool, schemas.Unset] = schemas.unset,
        containerNode: typing.Union[MetaOapg.properties.containerNode, bool, schemas.Unset] = schemas.unset,
        decimalValue: typing.Union[MetaOapg.properties.decimalValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        double: typing.Union[MetaOapg.properties.double, bool, schemas.Unset] = schemas.unset,
        doubleValue: typing.Union[MetaOapg.properties.doubleValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        elements: typing.Union[MetaOapg.properties.elements, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        fieldNames: typing.Union[MetaOapg.properties.fieldNames, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        fields: typing.Union[MetaOapg.properties.fields, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        floatingPointNumber: typing.Union[MetaOapg.properties.floatingPointNumber, bool, schemas.Unset] = schemas.unset,
        intValue: typing.Union[MetaOapg.properties.intValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        integralNumber: typing.Union[MetaOapg.properties.integralNumber, bool, schemas.Unset] = schemas.unset,
        long: typing.Union[MetaOapg.properties.long, bool, schemas.Unset] = schemas.unset,
        longValue: typing.Union[MetaOapg.properties.longValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        missingNode: typing.Union[MetaOapg.properties.missingNode, bool, schemas.Unset] = schemas.unset,
        null: typing.Union[MetaOapg.properties.null, bool, schemas.Unset] = schemas.unset,
        number: typing.Union[MetaOapg.properties.number, bool, schemas.Unset] = schemas.unset,
        numberType: typing.Union[MetaOapg.properties.numberType, str, schemas.Unset] = schemas.unset,
        numberValue: typing.Union[MetaOapg.properties.numberValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        object: typing.Union[MetaOapg.properties.object, bool, schemas.Unset] = schemas.unset,
        pojo: typing.Union[MetaOapg.properties.pojo, bool, schemas.Unset] = schemas.unset,
        textValue: typing.Union[MetaOapg.properties.textValue, str, schemas.Unset] = schemas.unset,
        textual: typing.Union[MetaOapg.properties.textual, bool, schemas.Unset] = schemas.unset,
        valueAsBoolean: typing.Union[MetaOapg.properties.valueAsBoolean, bool, schemas.Unset] = schemas.unset,
        valueAsDouble: typing.Union[MetaOapg.properties.valueAsDouble, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        valueAsInt: typing.Union[MetaOapg.properties.valueAsInt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        valueAsLong: typing.Union[MetaOapg.properties.valueAsLong, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        valueAsText: typing.Union[MetaOapg.properties.valueAsText, str, schemas.Unset] = schemas.unset,
        valueNode: typing.Union[MetaOapg.properties.valueNode, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JsonNode':
        return super().__new__(
            cls,
            *args,
            array=array,
            bigDecimal=bigDecimal,
            bigInteger=bigInteger,
            bigIntegerValue=bigIntegerValue,
            binary=binary,
            binaryValue=binaryValue,
            boolean=boolean,
            booleanValue=booleanValue,
            containerNode=containerNode,
            decimalValue=decimalValue,
            double=double,
            doubleValue=doubleValue,
            elements=elements,
            fieldNames=fieldNames,
            fields=fields,
            floatingPointNumber=floatingPointNumber,
            intValue=intValue,
            integralNumber=integralNumber,
            long=long,
            longValue=longValue,
            missingNode=missingNode,
            null=null,
            number=number,
            numberType=numberType,
            numberValue=numberValue,
            object=object,
            pojo=pojo,
            textValue=textValue,
            textual=textual,
            valueAsBoolean=valueAsBoolean,
            valueAsDouble=valueAsDouble,
            valueAsInt=valueAsInt,
            valueAsLong=valueAsLong,
            valueAsText=valueAsText,
            valueNode=valueNode,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.json_node_binary_value import JsonNodeBinaryValue
