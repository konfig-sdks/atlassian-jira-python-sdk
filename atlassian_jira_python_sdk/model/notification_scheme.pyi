# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
    Contact: ecosystem@atlassian.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlassian_jira_python_sdk import schemas  # noqa: F401


class NotificationScheme(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about a notification scheme.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            expand = schemas.StrSchema
            id = schemas.Int64Schema
            name = schemas.StrSchema
            
            
            class notificationSchemeEvents(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NotificationSchemeEvent']:
                        return NotificationSchemeEvent
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NotificationSchemeEvent'], typing.List['NotificationSchemeEvent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notificationSchemeEvents':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NotificationSchemeEvent':
                    return super().__getitem__(i)
        
            @staticmethod
            def projects() -> typing.Type['NotificationSchemeProjects']:
                return NotificationSchemeProjects
        
            @staticmethod
            def scope() -> typing.Type['Scope']:
                return Scope
            _self = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "expand": expand,
                "id": id,
                "name": name,
                "notificationSchemeEvents": notificationSchemeEvents,
                "projects": projects,
                "scope": scope,
                "self": _self,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expand"]) -> MetaOapg.properties.expand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationSchemeEvents"]) -> MetaOapg.properties.notificationSchemeEvents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projects"]) -> 'NotificationSchemeProjects': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> 'Scope': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["self"]) -> MetaOapg.properties._self: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "expand", "id", "name", "notificationSchemeEvents", "projects", "scope", "self", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expand"]) -> typing.Union[MetaOapg.properties.expand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationSchemeEvents"]) -> typing.Union[MetaOapg.properties.notificationSchemeEvents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projects"]) -> typing.Union['NotificationSchemeProjects', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union['Scope', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union[MetaOapg.properties._self, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "expand", "id", "name", "notificationSchemeEvents", "projects", "scope", "self", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        expand: typing.Union[MetaOapg.properties.expand, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        notificationSchemeEvents: typing.Union[MetaOapg.properties.notificationSchemeEvents, list, tuple, schemas.Unset] = schemas.unset,
        projects: typing.Union['NotificationSchemeProjects', schemas.Unset] = schemas.unset,
        scope: typing.Union['Scope', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NotificationScheme':
        return super().__new__(
            cls,
            *args,
            description=description,
            expand=expand,
            id=id,
            name=name,
            notificationSchemeEvents=notificationSchemeEvents,
            projects=projects,
            scope=scope,
            _configuration=_configuration,
            **kwargs,
        )

from atlassian_jira_python_sdk.model.notification_scheme_event import NotificationSchemeEvent
from atlassian_jira_python_sdk.model.notification_scheme_projects import NotificationSchemeProjects
from atlassian_jira_python_sdk.model.scope import Scope
